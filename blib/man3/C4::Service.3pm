.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "C4::Service 3pm"
.TH C4::Service 3pm "2012-07-03" "perl v5.14.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
C4::Service \- functions for JSON webservices.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
my ( \f(CW$query\fR, \f(CW$response\fR) = C4::Service\->init( { circulate => 1 } );
my ( \f(CW$borrowernumber\fR) = C4::Service\->require_params( 'borrowernumber' );
.PP
C4::Service\->return_error( 'internal', 'Frobnication failed', frobnicator => 'foo' );
.PP
\&\f(CW$response\fR\->param( frobnicated => 'You' );
.PP
C4::Service\->return_success( \f(CW$response\fR );
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module packages several useful functions for \s-1JSON\s0 webservices.
.SH "METHODS"
.IX Header "METHODS"
.SS "init"
.IX Subsection "init"
.Vb 1
\&   our ( $query, $response ) = C4::Service\->init( %needed_flags );
.Ve
.PP
Initialize the service and check for the permissions in \f(CW%needed_flags\fR.
.PP
Also, check that the user is authorized and has a current session, and return an
\&'auth' error if not.
.PP
\&\fIinit()\fR returns a \f(CW\*(C`CGI\*(C'\fR object and a \f(CW\*(C`C4::Output::JSONStream\*(C'\fR. The latter can
be used for both flat scripts and those that use \fIdispatch()\fR, and should be
passed to \f(CW\*(C`return_success()\*(C'\fR.
.SS "return_error"
.IX Subsection "return_error"
.Vb 1
\&    C4::Service\->return_error( $type, $error, %flags );
.Ve
.PP
Exit the script with \s-1HTTP\s0 status 400, and return a \s-1JSON\s0 error object.
.PP
\&\f(CW$type\fR should be a short, lower case code for the generic type of error (such
as 'auth' or 'input').
.PP
\&\f(CW$error\fR should be a more specific code giving information on the error. If
multiple errors of the same type occurred, they should be joined by '|'; i.e.,
\&'expired|different_ip'. Information in \f(CW$error\fR does not need to be
human-readable, as its formatting should be handled by the client.
.PP
Any additional information to be given in the response should be passed as
param => value pairs.
.SS "return_multi"
.IX Subsection "return_multi"
.Vb 1
\&    C4::Service\->return_multi( \e@responses, %flags );
.Ve
.PP
return_multi is similar to return_success or return_error, but allows you to
return different statuses for several requests sent at once (using \s-1HTTP\s0 status
\&\*(L"207 Multi-Status\*(R", much like WebDAV). The toplevel hashref (turned into the
\&\s-1JSON\s0 response) looks something like this:
.PP
.Vb 1
\&    { multi => JSON::true, responses => \e@responses, %flags }
.Ve
.PP
Each element of \f(CW@responses\fR should be either a plain hashref or an arrayref. If
it is a hashref, it is sent to the browser as-is. If it is an arrayref, it is
assumed to be in the same form as the arguments to return_error, and is turned
into an error structure.
.PP
All key-value pairs \f(CW%flags\fR are, as stated above, put into the returned \s-1JSON\s0
structure verbatim.
.SS "return_success"
.IX Subsection "return_success"
.Vb 1
\&    C4::Service\->return_success( $response );
.Ve
.PP
Print out the information in the \f(CW\*(C`C4::Output::JSONStream\*(C'\fR \f(CW$response\fR, then
exit with \s-1HTTP\s0 status 200.
.SS "require_params"
.IX Subsection "require_params"
.Vb 1
\&    my @values = C4::Service\->require_params( @params );
.Ve
.PP
Check that each of of the parameters specified in \f(CW@params\fR was sent in the
request, then return their values in that order.
.PP
If a required parameter is not found, send a 'param' error to the browser.
.SS "dispatch"
.IX Subsection "dispatch"
.Vb 4
\&    C4::Service\->dispatch(
\&        [ $path_regex, \e@required_params, \e&handler ],
\&        ...
\&    );
.Ve
.PP
dispatch takes several array-refs, each one describing a 'route', to use the
Rails terminology.
.PP
\&\f(CW$path_regex\fR should be a string in regex-form, describing which methods and
paths this route handles. Each route is tested in order, from the top down, so
put more specific handlers first. Also, the regex is tested on the request
method, plus the path. For instance, you might use the route [ '\s-1POST\s0 /', ... ]
to handle \s-1POST\s0 requests to your service.
.PP
Each named parameter in \f(CW@required_params\fR is tested for to make sure the route
matches, but does not raise an error if one is missing; it simply tests the next
route. If you would prefer to raise an error, instead use
\&\f(CW\*(C`C4::Service\-\*(C'\fRrequire_params> inside your handler.
.PP
\&\e&handler is called with each matched group in \f(CW$path_regex\fR in its arguments. For
example, if your service is accessed at the path /blah/123, and you call
\&\f(CW\*(C`dispatch\*(C'\fR with the route [ '\s-1GET\s0 /blah/(\e\ed+)', ... ], your handler will be called
with the argument '123'.
.SH "AUTHORS"
.IX Header "AUTHORS"
Koha Development Team
.PP
Jesse Weaver <jesse.weaver@liblime.com>
