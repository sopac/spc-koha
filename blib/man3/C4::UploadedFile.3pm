.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "C4::UploadedFile 3pm"
.TH C4::UploadedFile 3pm "2012-07-03" "perl v5.14.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
C4::UploadedFile \- manage files uploaded by the user
for later processing.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 9
\& # create and store data
\& my $uploaded_file = C4::UploadedFile\->new($sessionID);
\& my $fileID = $uploaded_file\->id();
\& $uploaded_file\->name(\*(Aqc:\etemp\efile.mrc\*(Aq);
\& $uploaded_file\->max_size(1024);
\& while ($have_more_data) {
\&    $uploaded_file\->stash($data, $bytes_read);
\& }
\& $uploaded_file\->done();
\&
\& # check status of current file upload
\& my $progress = C4::UploadedFile\->upload_progress($sessionID);
\&
\& # get file handle for reading uploaded file
\& my $uploaded_file = C4::UploadedFile\->fetch($fileID);
\& my $fh = $uploaded_file\->fh();
.Ve
.PP
Stores files uploaded by the user from their web browser.  The
uploaded files are temporary and at present are not guaranteed
to survive beyond the life of the user's session.
.PP
This module allows for tracking the progress of the file
currently being uploaded.
.PP
\&\s-1TODO:\s0 implement secure persistant storage of uploaded files.
.SH "METHODS"
.IX Header "METHODS"
.SS "new"
.IX Subsection "new"
.Vb 1
\&  my $uploaded_file = C4::UploadedFile\->new($sessionID);
.Ve
.PP
Creates a new object to represent the uploaded file.  Requires
the current session \s-1ID\s0.
.SS "id"
.IX Subsection "id"
.Vb 1
\&  my $fileID = $uploaded_file\->id();
.Ve
.SS "name"
.IX Subsection "name"
.Vb 2
\&  my $name = $uploaded_file\->name();
\&  $uploaded_file\->name($name);
.Ve
.PP
Accessor method for the name by which the file is to be known.
.SS "filename"
.IX Subsection "filename"
.Vb 1
\&  my $filename = $uploaded_file\->filename();
.Ve
.PP
Accessor method for the name by which the file is to be known.
.SS "max_size"
.IX Subsection "max_size"
.Vb 2
\&  my $max_size = $uploaded_file\->max_size();
\&  $uploaded_file\->max_size($max_size);
.Ve
.PP
Accessor method for the maximum size of the uploaded file.
.SS "stash"
.IX Subsection "stash"
.Vb 1
\&  $uploaded_file\->stash($dataref, $bytes_read);
.Ve
.PP
Write \f(CW$dataref\fR to the temporary file.  \f(CW$bytes_read\fR represents
the number of bytes (out of \f(CW$max_size\fR) transmitted so far.
.SS "done"
.IX Subsection "done"
.Vb 1
\&  $uploaded_file\->done();
.Ve
.PP
Indicates that all of the bytes have been uploaded.
.SS "upload_progress"
.IX Subsection "upload_progress"
.Vb 1
\&  my $upload_progress = C4::UploadFile\->upload_progress($sessionID);
.Ve
.PP
Returns (as an integer from 0 to 100) the percentage
progress of the current file upload.
.SS "fetch"
.IX Subsection "fetch"
.Vb 1
\&  my $uploaded_file = C4::UploadedFile\->fetch($sessionID, $fileID);
.Ve
.PP
Retrieves an uploaded file object from the current session.
.SS "fh"
.IX Subsection "fh"
.Vb 1
\&  my $fh = $uploaded_file\->fh();
.Ve
.PP
Returns an IO::File handle to read the uploaded file.
.SH "AUTHOR"
.IX Header "AUTHOR"
Koha Development Team <http://koha\-community.org/>
.PP
Galen Charlton <galen.charlton@liblime.com>
