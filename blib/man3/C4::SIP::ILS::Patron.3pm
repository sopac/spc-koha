.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "C4::SIP::ILS::Patron 3pm"
.TH C4::SIP::ILS::Patron 3pm "2012-07-03" "perl v5.14.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
ILS::Patron \- Portable Patron status object class for SIP
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
A \f(CW\*(C`ILS::Patron\*(C'\fR object holds information about a patron that's
used by self service terminals to authenticate and authorize a patron,
and to display information about the patron's borrowing activity.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&        use ILS;
\&        use ILS::Patron;
\&
\&        # Look up patron based on patron_id
\&        my $patron = new ILS::Patron $patron_id
\&
\&        # Basic object access methods
\&        $patron_id = $patron\->id;
\&        $str = $patron\->name;
\&        $str = $patron\->address;
\&        $str = $patron\->email_addr;
\&        $str = $patron\->home_phone;
\&        $str = $patron\->sip_birthdate;  
\&        $str = $patron\->ptype;
\&        $str = $patron\->language;
\&        $str = $patron\->password;
\&        $str = $patron\->check_password($password);
\&        $str = $patron\->currency;
\&        $str = $patron\->screen_msg;
\&        $str = $patron\->print_line;
\&
\&        # Check patron permissions 
\&        $bool = $patron\->charge_ok;
\&        $bool = $patron\->renew_ok;
\&        $bool = $patron\->recall_ok;
\&        $bool = $patron\->hold_ok;
\&        $bool = $patron\->card_lost;
\&        $bool = $patron\->too_many_charged;
\&        $bool = $patron\->too_many_overdue;
\&        $bool = $patron\->too_many_renewal;
\&        $bool = $patron\->too_many_claim_return;
\&        $bool = $patron\->too_many_lost;
\&        $bool = $patron\->excessive_fines;
\&        $bool = $patron\->excessive_fees;
\&        $bool = $patron\->too_many_billed;
\&
\&        # Patron borrowing activity
\&        $num = $patron\->recall_overdue;
\&        $num = $patron\->fee_amount;
\&        $bool = $patron\->drop_hold($item_id);
\&        @holds = $patron\->hold_items($start, $end);
\&        @items = $patron\->overdue_items($start, $end);
\&        @items = $patron\->charged_items($start, $end);
\&        @items = $patron\->fine_items($start, $end);
\&        @items = $patron\->recall_items($start, $end);
\&        @items = $patron\->unavail_holds($start, $end);
\&
\&        # Changing a patron\*(Aqs status
\&        $patron\->block($card_retained, $blocked_msg);
\&        $patron\->enable;
.Ve
.SH "INITIALIZATION"
.IX Header "INITIALIZATION"
A patron object is created by calling
.PP
.Vb 1
\&        $patron = new ILS::Patron $patron_id;
.Ve
.PP
where \f(CW$patron_id\fR is the patron's barcode as received from the
self service terminal.  If the patron barcode is not registered,
then \f(CW\*(C`new\*(C'\fR should return \f(CW\*(C`undef\*(C'\fR.
.SH "BASIC OBJECT ACCESS METHODS"
.IX Header "BASIC OBJECT ACCESS METHODS"
The following functions return the corresponding information
about the given patron, or \f(CW\*(C`undef\*(C'\fR if the information is
unavailable.
.PP
.Vb 5
\&        $patron_id = $patron\-E<gt>id;
\&        $str = $patron\-E<gt>name;
\&        $str = $patron\-E<gt>address;
\&        $str = $patron\-E<gt>email_addr;
\&        $str = $patron\-E<gt>home_phone;
\&
\&        $str = $patron\-E<gt>screen_msg;
\&        $str = $patron\-E<gt>print_line;
.Ve
.PP
If there are outstanding display messages associated with the
patron, then these return the screen message and print line,
respectively, as with the \f(CW\*(C`ILS\*(C'\fR methods.
.PP
There are a few other object access methods that need a bit more
explication however.
.ie n .SS """$str = $patron\->sip_birthdate;"""
.el .SS "\f(CW$str = $patron\->sip_birthdate;\fP"
.IX Subsection "$str = $patron->sip_birthdate;"
Returns the patron's birthday formated according to the \s-1SIP\s0
specification:
.PP
.Vb 1
\&        YYYYMMDD    HHMMSS
.Ve
.ie n .SS """$str = $patron\->ptype;"""
.el .SS "\f(CW$str = $patron\->ptype;\fP"
.IX Subsection "$str = $patron->ptype;"
Returns the \*(L"patron type\*(R" of the patron.  This is not used by the
\&\s-1SIP\s0 server code, but is passed through to the self service
terminal (using the non-standard protocol field \*(L"\s-1PC\s0\*(R").  Some self
service terminals use the patron type in determining what level
of service to provide (for example, Envisionware computer
management software can be configured to filter internet access
based on patron type).
.ie n .SS """$str = $patron\->language;"""
.el .SS "\f(CW$str = $patron\->language;\fP"
.IX Subsection "$str = $patron->language;"
A three-digit string encoding the patron's prefered language.
The full list is defined in the \s-1SIP\s0 specification, but some of
the important values are:
.PP
.Vb 8
\&        000 Unknown (default)
\&        001 English
\&        002 French
\&        008 Spanish
\&        011 Canadian French
\&        016 Arabic
\&        019 Chinese
\&        021 North American Spanish
.Ve
.ie n .SS """$bool = $patron\->check_password($password);"""
.el .SS "\f(CW$bool = $patron\->check_password($password);\fP"
.IX Subsection "$bool = $patron->check_password($password);"
Returns \f(CW\*(C`true\*(C'\fR if \f(CW$patron\fR's password is \f(CW$password\fR.
.ie n .SS """$str = $patron\->currency;"""
.el .SS "\f(CW$str = $patron\->currency;\fP"
.IX Subsection "$str = $patron->currency;"
Returns the three character \s-1ISO\s0 4217 currency code for the
patron's preferred currency.
.SH "CHECKING PATRON PERMISSIONS"
.IX Header "CHECKING PATRON PERMISSIONS"
Most of the methods associated with Patrons are related to
checking if they're authorized to perform various actions:
.PP
.Vb 10
\&        $bool = $patron\-E<gt>charge_ok;
\&        $bool = $patron\-E<gt>renew_ok;
\&        $bool = $patron\-E<gt>recall_ok;
\&        $bool = $patron\-E<gt>hold_ok;
\&        $bool = $patron\-E<gt>card_lost;
\&        $bool = $patron\-E<gt>recall_overdue;
\&        $bool = $patron\-E<gt>too_many_charged;
\&        $bool = $patron\-E<gt>too_many_overdue;
\&        $bool = $patron\-E<gt>too_many_renewal;
\&        $bool = $patron\-E<gt>too_many_claim_return;
\&        $bool = $patron\-E<gt>too_many_lost;
\&        $bool = $patron\-E<gt>excessive_fines;
\&        $bool = $patron\-E<gt>excessive_fees;
\&        $bool = $patron\-E<gt>too_many_billed;
.Ve
.SH "LISTS OF ITEMS ASSOCIATED WITH THE USER"
.IX Header "LISTS OF ITEMS ASSOCIATED WITH THE USER"
The \f(CW$patron\fR object provides a set of methods to find out
information about various sets that are associated with the
user.  All these methods take two optional parameters: \f(CW$start\fR
and \f(CW$end\fR, which define a subset of the list of items to be
returned (\f(CW1\fR is the first item in the list).  The following
methods all return a reference to a list of \f(CW$item_id\fRs:
.PP
.Vb 5
\&        $items = $patron\-E<gt>hold_items($start, $end);
\&        $items = $patron\-E<gt>overdue_items($start, $end);
\&        $items = $patron\-E<gt>charged_items($start, $end);
\&        $items = $patron\-E<gt>recall_items($start, $end);
\&        $items = $patron\-E<gt>unavail_holds($start, $end);
.Ve
.PP
It is also possible to retrieve an itemized list of the fines
outstanding.  This method returns a reference to an itemized list
of fines:
.PP
.Vb 1
\&        $fines = $patron\-E<gt>fine_items($start, $end);
.Ve
.SH "PATRON BORROWING ACTIVITY"
.IX Header "PATRON BORROWING ACTIVITY"
.ie n .SS """$num = $patron\->fee_amount;"""
.el .SS "\f(CW$num = $patron\->fee_amount;\fP"
.IX Subsection "$num = $patron->fee_amount;"
The total amount of fees and fines owed by the patron.
.ie n .SS """$bool = $patron\->drop_hold($item_id);"""
.el .SS "\f(CW$bool = $patron\->drop_hold($item_id);\fP"
.IX Subsection "$bool = $patron->drop_hold($item_id);"
Drops the hold that \f(CW$patron\fR has placed on the item
\&\f(CW$item_id\fR.  Returns \f(CW\*(C`false\*(C'\fR if the patron did not have a hold
on the item, \f(CW\*(C`true\*(C'\fR otherwise.
.SH "CHANGING A PATRON'S STATUS"
.IX Header "CHANGING A PATRON'S STATUS"
.ie n .SS """$status = $ils\->block($card_retained, $blocked_card_msg);"""
.el .SS "\f(CW$status = $ils\->block($card_retained, $blocked_card_msg);\fP"
.IX Subsection "$status = $ils->block($card_retained, $blocked_card_msg);"
Block the account of the patron identified by \f(CW$patron_id\fR.  If
the self check unit captured the patron's card, then
\&\f(CW$card_retained\fR will be \f(CW\*(C`true\*(C'\fR.  A message indicating why the
card was retained will be provided by the parameter
\&\f(CW$blocked_card_msg\fR.
.PP
This function returns an \f(CW\*(C`ILS::Patron\*(C'\fR object that has been
updated to indicate that the patron's privileges have been
blocked, or \f(CW\*(C`undef\*(C'\fR if the patron \s-1ID\s0 is not valid.
.ie n .SS """$patron\->enable;"""
.el .SS "\f(CW$patron\->enable;\fP"
.IX Subsection "$patron->enable;"
Reenable the patron after she's been blocked.  This is a test
function and will not normally be called by self-service
terminals in production.
