.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "C4::Record 3pm"
.TH C4::Record 3pm "2012-07-16" "perl v5.14.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
C4::Record \- MARC, MARCXML, DC, MODS, XML, etc. Record Management Functions and API
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
New in Koha 3.x. This module handles all record-related management functions.
.SH "API (EXPORTED FUNCTIONS)"
.IX Header "API (EXPORTED FUNCTIONS)"
.SS "marc2marc \- Convert from one flavour of \s-1ISO\-2709\s0 to another"
.IX Subsection "marc2marc - Convert from one flavour of ISO-2709 to another"
.Vb 1
\&  my ($error,$newmarc) = marc2marc($marc,$to_flavour,$from_flavour,$encoding);
.Ve
.PP
Returns an \s-1ISO\-2709\s0 scalar
.SS "marc2marcxml \- Convert from \s-1ISO\-2709\s0 to \s-1MARCXML\s0"
.IX Subsection "marc2marcxml - Convert from ISO-2709 to MARCXML"
.Vb 1
\&  my ($error,$marcxml) = marc2marcxml($marc,$encoding,$flavour);
.Ve
.PP
Returns a \s-1MARCXML\s0 scalar
.PP
\&\f(CW$marc\fR \- an \s-1ISO\-2709\s0 scalar or MARC::Record object
.PP
\&\f(CW$encoding\fR \- \s-1UTF\-8\s0 or \s-1MARC\-8\s0 [\s-1UTF\-8\s0]
.PP
\&\f(CW$flavour\fR \- \s-1MARC21\s0 or \s-1UNIMARC\s0
.PP
\&\f(CW$dont_entity_encode\fR \- a flag that instructs marc2marcxml not to entity encode the xml before returning (optional)
.SS "marcxml2marc \- Convert from \s-1MARCXML\s0 to \s-1ISO\-2709\s0"
.IX Subsection "marcxml2marc - Convert from MARCXML to ISO-2709"
.Vb 1
\&  my ($error,$marc) = marcxml2marc($marcxml,$encoding,$flavour);
.Ve
.PP
Returns an \s-1ISO\-2709\s0 scalar
.PP
\&\f(CW$marcxml\fR \- a \s-1MARCXML\s0 record
.PP
\&\f(CW$encoding\fR \- \s-1UTF\-8\s0 or \s-1MARC\-8\s0 [\s-1UTF\-8\s0]
.PP
\&\f(CW$flavour\fR \- \s-1MARC21\s0 or \s-1UNIMARC\s0
.SS "marc2dcxml \- Convert from \s-1ISO\-2709\s0 to Dublin Core"
.IX Subsection "marc2dcxml - Convert from ISO-2709 to Dublin Core"
.Vb 1
\&  my ($error,$dcxml) = marc2dcxml($marc,$qualified);
.Ve
.PP
Returns a DublinCore::Record object, will eventually return a Dublin Core scalar
.PP
\&\s-1FIXME:\s0 should return actual \s-1XML\s0, not just an object
.PP
\&\f(CW$marc\fR \- an \s-1ISO\-2709\s0 scalar or MARC::Record object
.PP
\&\f(CW$qualified\fR \- specify whether qualified Dublin Core should be used in the input or output [0]
.SS "marc2modsxml \- Convert from \s-1ISO\-2709\s0 to \s-1MODS\s0"
.IX Subsection "marc2modsxml - Convert from ISO-2709 to MODS"
.Vb 1
\&  my $modsxml = marc2modsxml($marc);
.Ve
.PP
Returns a \s-1MODS\s0 scalar
.SS "marc2madsxml \- Convert from \s-1ISO\-2709\s0 to \s-1MADS\s0"
.IX Subsection "marc2madsxml - Convert from ISO-2709 to MADS"
.Vb 1
\&  my $madsxml = marc2madsxml($marc);
.Ve
.PP
Returns a \s-1MADS\s0 scalar
.SS "_transformWithStylesheet \- Transform a \s-1MARC\s0 record with a stylesheet"
.IX Subsection "_transformWithStylesheet - Transform a MARC record with a stylesheet"
.Vb 1
\&    my $xml = _transformWithStylesheet($marc, $stylesheet)
.Ve
.PP
Returns the \s-1XML\s0 scalar result of the transformation. \f(CW$stylesheet\fR should
contain the path to a stylesheet under intrahtdocs.
.SS "marc2csv \- Convert several records from \s-1UNIMARC\s0 to \s-1CSV\s0"
.IX Subsection "marc2csv - Convert several records from UNIMARC to CSV"
.Vb 1
\&  my ($csv) = marc2csv($biblios, $csvprofileid);
.Ve
.PP
Pre and postprocessing can be done through a \s-1YAML\s0 file
.PP
Returns a \s-1CSV\s0 scalar
.PP
\&\f(CW$biblio\fR \- a list of biblionumbers
.PP
\&\f(CW$csvprofileid\fR \- the id of the \s-1CSV\s0 profile to use for the export (see export_format.export_format_id and the GetCsvProfiles function in C4::Csv)
.SS "marcrecord2csv \- Convert a single record from \s-1UNIMARC\s0 to \s-1CSV\s0"
.IX Subsection "marcrecord2csv - Convert a single record from UNIMARC to CSV"
.Vb 1
\&  my ($csv) = marcrecord2csv($biblio, $csvprofileid, $header);
.Ve
.PP
Returns a \s-1CSV\s0 scalar
.PP
\&\f(CW$biblio\fR \- a biblionumber
.PP
\&\f(CW$csvprofileid\fR \- the id of the \s-1CSV\s0 profile to use for the export (see export_format.export_format_id and the GetCsvProfiles function in C4::Csv)
.PP
\&\f(CW$header\fR \- true if the headers are to be printed (typically at first pass)
.PP
\&\f(CW$csv\fR \- an already initialised Text::CSV object
.SS "changeEncoding \- Change the encoding of a record"
.IX Subsection "changeEncoding - Change the encoding of a record"
.Vb 1
\&  my ($error, $newrecord) = changeEncoding($record,$format,$flavour,$to_encoding,$from_encoding);
.Ve
.PP
Changes the encoding of a record
.PP
\&\f(CW$record\fR \- the record itself can be in \s-1ISO\-2709\s0, a MARC::Record object, or \s-1MARCXML\s0 for now (required)
.PP
\&\f(CW$format\fR \- \s-1MARC\s0 or \s-1MARCXML\s0 (required)
.PP
\&\f(CW$flavour\fR \- \s-1MARC21\s0 or \s-1UNIMARC\s0, if \s-1MARC21\s0, it will change the leader (optional) [defaults to Koha system preference]
.PP
\&\f(CW$to_encoding\fR \- the encoding you want the record to end up in (optional) [\s-1UTF\-8\s0]
.PP
\&\f(CW$from_encoding\fR \- the encoding the record is currently in (optional, it will probably be able to tell unless there's a problem with the record)
.PP
\&\s-1FIXME:\s0 the from_encoding doesn't work yet
.PP
\&\s-1FIXME:\s0 better handling for \s-1UNIMARC\s0, it should allow management of 100 field
.PP
\&\s-1FIXME:\s0 shouldn't have to convert to and from xml/marc just to change encoding someone needs to re-write MARC::Record's 'encoding' method to actually alter the encoding rather than just changing the leader
.SS "marc2bibtex \- Convert from \s-1MARC21\s0 and \s-1UNIMARC\s0 to BibTex"
.IX Subsection "marc2bibtex - Convert from MARC21 and UNIMARC to BibTex"
.Vb 1
\&  my ($bibtex) = marc2bibtex($record, $id);
.Ve
.PP
Returns a BibTex scalar
.PP
\&\f(CW$record\fR \- a MARC::Record object
.PP
\&\f(CW$id\fR \- an id for the BibTex record (might be the biblionumber)
.SH "INTERNAL FUNCTIONS"
.IX Header "INTERNAL FUNCTIONS"
.SS "_entity_encode \- Entity-encode an array of strings"
.IX Subsection "_entity_encode - Entity-encode an array of strings"
.Vb 1
\&  my ($entity_encoded_string) = _entity_encode($string);
.Ve
.PP
or
.PP
.Vb 1
\&  my (@entity_encoded_strings) = _entity_encode(@strings);
.Ve
.PP
Entity-encode an array of strings
.SH "AUTHOR"
.IX Header "AUTHOR"
Joshua Ferraro <jmf@liblime.com>
.SH "MODIFICATIONS"
.IX Header "MODIFICATIONS"
