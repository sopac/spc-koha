.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "C4::Ratings 3pm"
.TH C4::Ratings 3pm "2012-07-03" "perl v5.14.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
C4::Ratings \- a module to manage user ratings of Koha biblios
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Ratings.pm provides simple functionality for a user to 'rate' a biblio, and to retrieve a biblio's rating info
.PP
the 4 subroutines allow a user to add, delete modify and retrieve rating info for a biblio.
.PP
The rating can be from 1 to 5 stars, (5 stars being the highest rating)
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Get a rating for a bib
 my \f(CW$rating_hashref\fR = GetRating( \f(CW$biblionumber\fR, undef );
 my \f(CW$rating_hashref\fR = GetRating( \f(CW$biblionumber\fR, \f(CW$borrowernumber\fR );
.PP
Add a rating for a bib
 my \f(CW$rating_hashref\fR = AddRating( \f(CW$biblionumber\fR, \f(CW$borrowernumber\fR, \f(CW$rating_value\fR );
.PP
Mod a rating for a bib
 my \f(CW$rating_hashref\fR = ModRating( \f(CW$biblionumber\fR, \f(CW$borrowernumber\fR, \f(CW$rating_value\fR );
.PP
Delete a rating for a bib
 my \f(CW$rating_hashref\fR = DelRating( \f(CW$biblionumber\fR, \f(CW$borrowernumber\fR );
.PP
All subroutines in Ratings.pm return a hashref which contain 4 keys
.PP
for example, after executing this statment below...
.PP
.Vb 1
\&    my $rating_hashref = GetRating ( $biblionumber, $borrowernumber ) ;
.Ve
.PP
\&\f(CW$rating_hashref\fR now contains a hashref that looks like this...
.PP
.Vb 6
\&    $rating  = {
\&             rating_avg       => \*(Aq2\*(Aq,
\&             rating_avg_int   => \*(Aq2.3\*(Aq,
\&             rating_total     => \*(Aq432\*(Aq,
\&             rating_value => \*(Aq5\*(Aq
\&    }
.Ve
.PP
they 4 keys returned in the hashref are...
.PP
.Vb 4
\&    rating_avg:            average rating of a biblio
\&    rating_avg_int:        average rating of a biblio, rounded to 1dp
\&    rating_total:          total number of ratings of a biblio
\&    rating_value:          logged\-in user\*(Aqs rating of a biblio
.Ve
.SH "BUGS"
.IX Header "BUGS"
Please use bugs.koha\-community.org for tracking bugs.
.SH "SOURCE AVAILABILITY"
.IX Header "SOURCE AVAILABILITY"
The source is available from the koha\-community.org git server
http://git.koha\-community.org <http://git.koha-community.org>
.SH "AUTHOR"
.IX Header "AUTHOR"
Original code: Mason James <mtj@kohaaloha.com>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2011 Mason James <mtj@kohaaloha.com>
.SH "LICENSE"
.IX Header "LICENSE"
C4::Ratings is free software. You can redistribute it and/or
modify it under the same terms as Koha itself.
.SH "CREDITS"
.IX Header "CREDITS"
.Vb 2
\& Mason James <mtj@kohaaloha.com>
\& Koha Dev Team <http://koha\-community.org>
.Ve
.SS "GetRating"
.IX Subsection "GetRating"
.Vb 1
\&    GetRating($biblionumber, [$borrowernumber])
.Ve
.PP
Get a rating for a bib
 my \f(CW$rating_hashref\fR = GetRating( \f(CW$biblionumber\fR, undef );
 my \f(CW$rating_hashref\fR = GetRating( \f(CW$biblionumber\fR, \f(CW$borrowernumber\fR );
.PP
This returns the rating for the supplied biblionumber. It will also return
the rating that the supplied user gave to the provided biblio. If a particular
value can't be supplied, '0' is returned for that value.
.PP
\fI\s-1RETURNS\s0\fR
.IX Subsection "RETURNS"
.PP
A hashref containing:
.IP "\(bu" 4
rating_avg \- average rating of a biblio
=item * rating_avg_int \- average rating of a biblio, rounded to 1dp
=item * rating_total \- total number of ratings of a biblio
=item * rating_value \- logged-in user's rating of a biblio
.SS "AddRating"
.IX Subsection "AddRating"
.Vb 1
\&    my $rating_hashref = AddRating( $biblionumber, $borrowernumber, $rating_value );
.Ve
.PP
Add a rating for a bib
.PP
This adds or updates a rating for a particular user on a biblio. If the value
is 0, then the rating will be deleted. If the value is out of the range of
0\-5, nothing will happen.
.SS "ModRating"
.IX Subsection "ModRating"
.Vb 1
\&    my $rating_hashref = ModRating( $biblionumber, $borrowernumber, $rating_value );
.Ve
.PP
Mod a rating for a bib
.SS "DelRating"
.IX Subsection "DelRating"
.Vb 1
\&    my $rating_hashref = DelRating( $biblionumber, $borrowernumber );
.Ve
.PP
Delete a rating for a bib
