.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "installer::InstallAuth 3pm"
.TH installer::InstallAuth 3pm "2012-07-03" "perl v5.14.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
InstallAuth \- Authenticates Koha users for Install process
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&  use CGI;
\&  use InstallAuth;
\&  use C4::Output;
\&
\&  my $query = new CGI;
\&
\&  my ($template, $borrowernumber, $cookie) 
\&    = get_template_and_user({template_name   => "opac\-main.tmpl",
\&                             query           => $query,
\&                             type            => "opac",
\&                             authnotrequired => 1,
\&                             flagsrequired   => {borrow => 1},
\&                          });
\&
\&  output_html_with_http_headers $query, $cookie, $template\->output;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.Vb 6
\&    The main function of this module is to provide
\&    authentification. However the get_template_and_user function has
\&    been provided so that a users login information is passed along
\&    automatically. This gets loaded into the template.
\&    This package is different from C4::Auth in so far as 
\&    C4::Auth uses many preferences which are supposed NOT to be obtainable when installing the database.
\&    
\&    As in C4::Auth, Authentication is based on cookies.
.Ve
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.IP "get_template_and_user" 2
.IX Item "get_template_and_user"
.Vb 7
\&  my ($template, $borrowernumber, $cookie)
\&    = get_template_and_user({template_name   => "opac\-main.tmpl",
\&                             query           => $query,
\&                             type            => "opac",
\&                             authnotrequired => 1,
\&                             flagsrequired   => {borrow => 1},
\&                          });
\&
\&    This call passes the C<query>, C<flagsrequired> and C<authnotrequired>
\&    to C<&checkauth> (in this module) to perform authentification.
\&    See C<&checkauth> for an explanation of these parameters.
\&
\&    The C<template_name> is then used to find the correct template for
\&    the page. The authenticated users details are loaded onto the
\&    template in the HTML::Template LOOP variable C<USER_INFO>. Also the
\&    C<sessionID> is passed to the template. This can be used in templates
\&    if cookies are disabled. It needs to be put as and input to every
\&    authenticated page.
\&
\&    More information on the C<gettemplate> sub can be found in the
\&    Templates.pm module.
.Ve
.IP "checkauth" 2
.IX Item "checkauth"
.Vb 1
\&  ($userid, $cookie, $sessionID) = &checkauth($query, $noauth, $flagsrequired, $type);
.Ve
.Sp
Verifies that the user is authorized to run this script.  If
the user is authorized, a (userid, cookie, session-id, flags)
quadruple is returned.  If the user is not authorized but does
not have the required privilege (see \f(CW$flagsrequired\fR below), it
displays an error page and exits.  Otherwise, it displays the
login page and exits.
.Sp
Note that \f(CW&checkauth\fR will return if and only if the user
is authorized, so it should be called early on, before any
unfinished operations (e.g., if you've opened a file, then
\&\f(CW&checkauth\fR won't close it for you).
.Sp
\&\f(CW$query\fR is the \s-1CGI\s0 object for the script calling \f(CW&checkauth\fR.
.Sp
The \f(CW$noauth\fR argument is optional. If it is set, then no
authorization is required for the script.
.Sp
\&\f(CW&checkauth\fR fetches user and session information from \f(CW$query\fR and
ensures that the user is authorized to run scripts that require
authorization.
.Sp
The \f(CW$flagsrequired\fR argument specifies the required privileges
the user must have if the username and password are correct.
It should be specified as a reference-to-hash; keys in the hash
should be the \*(L"flags\*(R" for the user, as specified in the Members
intranet module. Any key specified must correspond to a \*(L"flag\*(R"
in the userflags table. E.g., { circulate => 1 } would specify
that the user must have the \*(L"circulate\*(R" privilege in order to
proceed. To make sure that access control is correct, the
\&\f(CW$flagsrequired\fR parameter must be specified correctly.
.Sp
The \f(CW$type\fR argument specifies whether the template should be
retrieved from the opac or intranet directory tree.  \*(L"opac\*(R" is
assumed if it is not specified; however, if \f(CW$type\fR is specified,
\&\*(L"intranet\*(R" is assumed if it is not \*(L"opac\*(R".
.Sp
If \f(CW$query\fR does not have a valid session \s-1ID\s0 associated with it
(i.e., the user has not logged in) or if the session has expired,
\&\f(CW&checkauth\fR presents the user with a login page (from the point of
view of the original script, \f(CW&checkauth\fR does not return). Once the
user has authenticated, \f(CW&checkauth\fR restarts the original script
(this time, \f(CW&checkauth\fR returns).
.Sp
The login page is provided using a HTML::Template, which is set in the
systempreferences table or at the top of this file. The variable \f(CW$type\fR
selects which template to use, either the opac or the intranet 
authentification template.
.Sp
\&\f(CW&checkauth\fR returns a user \s-1ID\s0, a cookie, and a session \s-1ID\s0. The
cookie should be sent back to the browser; it verifies that the user
has authenticated.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\s-1\fICGI\s0\fR\|(3)
.PP
\&\fIC4::Output\fR\|(3)
.PP
\&\fIDigest::MD5\fR\|(3)
