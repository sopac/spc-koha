.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "C4::Message 3pm"
.TH C4::Message 3pm "2012-07-03" "perl v5.14.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
C4::Message \- object for messages in the message_queue table
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
How to add a new message to the queue:
.PP
.Vb 10
\&  use C4::Message;
\&  use C4::Items;
\&  my $borrower = { borrowernumber => 1 };
\&  my $item     = C4::Items::GetItem(1);
\&  my $letter =  C4::Letters::GetPreparedLetter (
\&      module => \*(Aqcirculation\*(Aq,
\&      letter_code => \*(AqCHECKOUT\*(Aq,
\&      branchcode => $branch,
\&      tables => {
\&          \*(Aqbiblio\*(Aq, $item\->{biblionumber},
\&          \*(Aqbiblioitems\*(Aq, $item\->{biblionumber},
\&      },
\&  );
\&  C4::Message\->enqueue($letter, $borrower\->{borrowernumber}, \*(Aqemail\*(Aq);
.Ve
.PP
How to update a borrower's last checkout message:
.PP
.Vb 5
\&  use C4::Message;
\&  my $borrower = { borrowernumber => 1 };
\&  my $message  = C4::Message\->find_last_message($borrower, \*(AqCHECKOUT\*(Aq, \*(Aqemail\*(Aq);
\&  $message\->append("you also checked out some other book....");
\&  $message\->update;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module presents an \s-1OO\s0 interface to the message_queue.  Previously, 
you could only add messages to the message_queue via 
\&\f(CW\*(C`C4::Letters::EnqueueMessage()\*(C'\fR.  With this module, you can also get 
previously inserted messages, manipulate them, and save them back to the 
database.
.SS "Class Methods"
.IX Subsection "Class Methods"
\fIC4::Message\->new(\e%attributes)\fR
.IX Subsection "C4::Message->new(%attributes)"
.PP
This method creates an in-memory version of a message object.
.PP
\fIC4::Message\->find($id)\fR
.IX Subsection "C4::Message->find($id)"
.PP
This method searches the message_queue table for a row with the given
\&\f(CW\*(C`message_id\*(C'\fR and it'll return a C4::Message object if it finds one.
.PP
\fIC4::Message\->find_last_message($borrower, \f(CI$letter_code\fI, \f(CI$transport\fI)\fR
.IX Subsection "C4::Message->find_last_message($borrower, $letter_code, $transport)"
.PP
This method is used to get the borrower's most recent, pending, check-in or
checkout message.  (This makes it possible to add more information to the
message before it gets sent out.)
.PP
\fIC4::Message\->enqueue($letter, \f(CI$borrower\fI, \f(CI$transport\fI)\fR
.IX Subsection "C4::Message->enqueue($letter, $borrower, $transport)"
.PP
This is a front-end for \f(CW\*(C`C4::Letters::EnqueueLetter()\*(C'\fR that adds metadata to
the message.
.SS "Instance Methods"
.IX Subsection "Instance Methods"
\fI\f(CI$message\fI\->\fIupdate()\fI\fR
.IX Subsection "$message->update()"
.PP
This saves the \f(CW$message\fR object back to the database.  It needs to have
already been created via \f(CW\*(C`enqueue\*(C'\fR for this to work.
.PP
\fI\f(CI$message\fI\->metadata(\e%new_metadata)\fR
.IX Subsection "$message->metadata(%new_metadata)"
.PP
This method automatically serializes and deserializes the metadata
attribute.  (It is stored in \s-1YAML\s0 format.)
.PP
\fI\f(CI$message\fI\->append(\e%letter)\fR
.IX Subsection "$message->append(%letter)"
.PP
If passed a hashref, this method will assume that the hashref is in the form
that \f(CW\*(C`C4::Letters::getletter()\*(C'\fR returns.  It will append the body of the
letter to the message.
.PP
\fI\f(CI$message\fI\->append($string)\fR
.IX Subsection "$message->append($string)"
.PP
If passed a string, it'll append the string to the message.
.SS "Attributes Accessors"
.IX Subsection "Attributes Accessors"
\fI\f(CI$message\fI\->message_id\fR
.IX Subsection "$message->message_id"
.PP
\fI\f(CI$message\fI\->borrowernumber\fR
.IX Subsection "$message->borrowernumber"
.PP
\fI\f(CI$message\fI\->subject\fR
.IX Subsection "$message->subject"
.PP
\fI\f(CI$message\fI\->content\fR
.IX Subsection "$message->content"
.PP
\fI\f(CI$message\fI\->metadata\fR
.IX Subsection "$message->metadata"
.PP
\fI\f(CI$message\fI\->letter_code\fR
.IX Subsection "$message->letter_code"
.PP
\fI\f(CI$message\fI\->message_transport_type\fR
.IX Subsection "$message->message_transport_type"
.PP
\fI\f(CI$message\fI\->status\fR
.IX Subsection "$message->status"
.PP
\fI\f(CI$message\fI\->time_queued\fR
.IX Subsection "$message->time_queued"
.PP
\fI\f(CI$message\fI\->to_address\fR
.IX Subsection "$message->to_address"
.PP
\fI\f(CI$message\fI\->from_address\fR
.IX Subsection "$message->from_address"
.PP
\fI\f(CI$message\fI\->content_type\fR
.IX Subsection "$message->content_type"
.SH "SEE ALSO"
.IX Header "SEE ALSO"
C4::Circulation, C4::Letters, C4::Members::Messaging
.SH "AUTHOR"
.IX Header "AUTHOR"
John Beppu <john.beppu@liblime.com>
