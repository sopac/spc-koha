.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "C4::Matcher 3pm"
.TH C4::Matcher 3pm "2012-07-03" "perl v5.14.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
C4::Matcher \- find MARC records matching another one
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  my @matchers = C4::Matcher::GetMatcherList();
\&
\&  my $matcher = C4::Matcher\->new($record_type);
\&  $matcher\->threshold($threshold);
\&  $matcher\->code($code);
\&  $matcher\->description($description);
\&
\&  $matcher\->add_simple_matchpoint(\*(Aqisbn\*(Aq, 1000, \*(Aq020\*(Aq, \*(Aqa\*(Aq, \-1, 0, \*(Aq\*(Aq);
\&  $matcher\->add_simple_matchpoint(\*(AqDate\*(Aq, 1000, \*(Aq008\*(Aq, \*(Aq\*(Aq, 7, 4, \*(Aq\*(Aq);
\&  $matcher\->add_matchpoint(\*(Aqisbn\*(Aq, 1000, [ { tag => \*(Aq020\*(Aq, subfields => \*(Aqa\*(Aq, norms => [] } ]);
\&
\&  $matcher\->add_simple_required_check(\*(Aq245\*(Aq, \*(Aqa\*(Aq, \-1, 0, \*(Aq\*(Aq, \*(Aq245\*(Aq, \*(Aqa\*(Aq, \-1, 0, \*(Aq\*(Aq);
\&  $matcher\->add_required_check([ { tag => \*(Aq245\*(Aq, subfields => \*(Aqa\*(Aq, norms => [] } ], 
\&                               [ { tag => \*(Aq245\*(Aq, subfields => \*(Aqa\*(Aq, norms => [] } ]);
\&
\&  my @matches = $matcher\->get_matches($marc_record, $max_matches);
\&
\&  foreach $match (@matches) {
\&
\&      # matches already sorted in order of
\&      # decreasing score
\&      print "record ID: $match\->{\*(Aqrecord_id\*(Aq};
\&      print "score:     $match\->{\*(Aqscore\*(Aq};
\&
\&  }
\&
\&  my $matcher_description = $matcher\->dump();
.Ve
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.SS "GetMatcherList"
.IX Subsection "GetMatcherList"
.Vb 1
\&  my @matchers = C4::Matcher::GetMatcherList();
.Ve
.PP
Returns an array of hashrefs list all matchers
present in the database.  Each hashref includes:
.PP
.Vb 3
\& * matcher_id
\& * code
\& * description
.Ve
.SS "GetMatcherId"
.IX Subsection "GetMatcherId"
.Vb 1
\&  my $matcher_id = C4::Matcher::GetMatcherId($code);
.Ve
.PP
Returns the matcher_id of a code.
.SH "METHODS"
.IX Header "METHODS"
.SS "new"
.IX Subsection "new"
.Vb 1
\&  my $matcher = C4::Matcher\->new($record_type, $threshold);
.Ve
.PP
Creates a new Matcher.  \f(CW$record_type\fR indicates which search
database to use, e.g., 'biblio' or 'authority' and defaults to
\&'biblio', while \f(CW$threshold\fR is the minimum score required for a match
and defaults to 1000.
.SS "fetch"
.IX Subsection "fetch"
.Vb 1
\&  my $matcher = C4::Matcher\->fetch($id);
.Ve
.PP
Creates a matcher object from the version stored
in the database.  If a matcher with the given
id does not exist, returns undef.
.SS "store"
.IX Subsection "store"
.Vb 1
\&  my $id = $matcher\->store();
.Ve
.PP
Stores matcher in database.  The return value is the \s-1ID\s0 
of the marc_matchers row.  If the matcher was 
previously retrieved from the database via the \fIfetch()\fR
method, the \s-1DB\s0 representation of the matcher
is replaced.
.SS "delete"
.IX Subsection "delete"
.Vb 1
\&  C4::Matcher\->delete($id);
.Ve
.PP
Deletes the matcher of the specified \s-1ID\s0
from the database.
.SS "threshold"
.IX Subsection "threshold"
.Vb 2
\&  $matcher\->threshold(1000);
\&  my $threshold = $matcher\->threshold();
.Ve
.PP
Accessor method.
.SS "_id"
.IX Subsection "_id"
.Vb 2
\&  $matcher\->_id(123);
\&  my $id = $matcher\->_id();
.Ve
.PP
Accessor method.  Note that using this method
to set the \s-1DB\s0 \s-1ID\s0 of the matcher should not be
done outside of the editing \s-1CGI\s0.
.SS "code"
.IX Subsection "code"
.Vb 2
\&  $matcher\->code(\*(AqISBN\*(Aq);
\&  my $code = $matcher\->code();
.Ve
.PP
Accessor method.
.SS "description"
.IX Subsection "description"
.Vb 2
\&  $matcher\->description(\*(Aqmatch on ISBN\*(Aq);
\&  my $description = $matcher\->description();
.Ve
.PP
Accessor method.
.SS "add_matchpoint"
.IX Subsection "add_matchpoint"
.Vb 1
\&  $matcher\->add_matchpoint($index, $score, $matchcomponents);
.Ve
.PP
Adds a matchpoint that may include multiple components.  The \f(CW$index\fR
parameter identifies the index that will be searched, while \f(CW$score\fR
is the weight that will be added if a match is found.
.PP
\&\f(CW$matchcomponents\fR should be a reference to an array of matchpoint
compoents, each of which should be a hash containing the following 
keys:
    tag
    subfields
    offset
    length
    norms
.PP
The normalization_rules value should in turn be a reference to an
array, each element of which should be a reference to a 
normalization subroutine (under C4::Normalize) to be applied
to the source string.
.SS "add_simple_matchpoint"
.IX Subsection "add_simple_matchpoint"
.Vb 3
\&  $matcher\->add_simple_matchpoint($index, $score, $source_tag,
\&                            $source_subfields, $source_offset, 
\&                            $source_length, $source_normalizer);
.Ve
.PP
Adds a simple matchpoint rule \*(-- after composing a key based on the source tag and subfields,
normalized per the normalization fuction, search the index.  All records retrieved
will receive the assigned score.
.SS "add_required_check"
.IX Subsection "add_required_check"
.Vb 1
\&  $match\->add_required_check($source_matchpoint, $target_matchpoint);
.Ve
.PP
Adds a required check definition.  A required check means that in 
order for a match to be considered valid, the key derived from the
source (incoming) record must match the key derived from the target
(already in \s-1DB\s0) record.
.PP
Unlike a regular matchpoint, only the first repeat of each tag 
in the source and target match criteria are considered.
.PP
A typical example of a required check would be verifying that the
titles and publication dates match.
.PP
\&\f(CW$source_matchpoint\fR and \f(CW$target_matchpoint\fR are each a reference to
an array of hashes, where each hash follows the same definition
as the matchpoint component specification in add_matchpoint, i.e.,
.PP
.Vb 5
\&    tag
\&    subfields
\&    offset
\&    length
\&    norms
.Ve
.PP
The normalization_rules value should in turn be a reference to an
array, each element of which should be a reference to a 
normalization subroutine (under C4::Normalize) to be applied
to the source string.
.SS "add_simple_required_check"
.IX Subsection "add_simple_required_check"
.Vb 4
\&  $matcher\->add_simple_required_check($source_tag, $source_subfields,
\&                $source_offset, $source_length, $source_normalizer, 
\&                $target_tag, $target_subfields, $target_offset, 
\&                $target_length, $target_normalizer);
.Ve
.PP
Adds a required check, which requires that the normalized keys made from the source and targets
must match for a match to be considered valid.
.SS "find_matches"
.IX Subsection "find_matches"
.Vb 7
\&  my @matches = $matcher\->get_matches($marc_record, $max_matches);
\&  foreach $match (@matches) {
\&      # matches already sorted in order of
\&      # decreasing score
\&      print "record ID: $match\->{\*(Aqrecord_id\*(Aq};
\&      print "score:     $match\->{\*(Aqscore\*(Aq};
\&  }
.Ve
.PP
Identifies all of the records matching the given \s-1MARC\s0 record.  For a record already 
in the database to be considered a match, it must meet the following criteria:
.IP "1. Total score from its matching field must exceed the supplied threshold." 2
.IX Item "1. Total score from its matching field must exceed the supplied threshold."
.PD 0
.IP "2. It must pass all required checks." 2
.IX Item "2. It must pass all required checks."
.PD
.PP
Only the top \f(CW$max_matches\fR matches are returned.  The returned array is sorted
in order of decreasing score, i.e., the best match is first.
.SS "dump"
.IX Subsection "dump"
.Vb 1
\&  $description = $matcher\->dump();
.Ve
.PP
Returns a reference to a structure containing all of the information
in the matcher object.  This is mainly a convenience method to
aid setting up a \s-1HTML\s0 editing form.
.SH "AUTHOR"
.IX Header "AUTHOR"
Koha Development Team <http://koha\-community.org/>
.PP
Galen Charlton <galen.charlton@liblime.com>
