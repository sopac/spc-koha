.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "C4::SIP::ILS::Item 3pm"
.TH C4::SIP::ILS::Item 3pm "2012-07-03" "perl v5.14.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
ILS::Item \- Portable Item status object class for SIP
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&        use ILS;
\&        use ILS::Item;
\&
\&        # Look up item based on item_id
\&        my $item = new ILS::Item $item_id;
\&
\&        # Basic object access methods
\&    $item_id    = $item\->id;
\&    $title      = $item\->title_id;
\&    $media_type = $item\->sip_media_type;
\&    $bool       = $item\->magnetic_media;
\&    $locn       = $item\->permanent_location;
\&    $locn       = $item\->current_location;
\&    $props      = $item\->sip_item_props;
\&    $owner      = $item\->owner;
\&    $str        = $item\->sip_circulation_status;
\&    $bool       = $item\->available;
\&    @hold_queue = $item\->hold_queue;
\&    $pos        = $item\->hold_queue_position($patron_id);
\&    $due        = $item\->due_date;
\&    $pickup     = $item\->hold_pickup_date;
\&    $recall     = $item\->recall_date;
\&    $fee        = $item\->fee;
\&    $currency   = $item\->fee_currency;
\&    $type       = $item\->sip_fee_type;
\&    $mark       = $item\->sip_security_marker;
\&    $msg        = $item\->screen_msg;
\&    $msg        = $item\->print_line;
\&
\&    # Operations on items
\&    $status = $item\->status_update($item_props);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
An \f(CW\*(C`ILS::Item\*(C'\fR object holds the information necessary to
circulate an item in the library's collection.  It does not need
to be a complete bibliographic description of the item; merely
basic human-appropriate identifying information is necessary
(that is, not the barcode, but just a title, and maybe author).
.PP
For the most part, \f(CW\*(C`ILS::Item\*(C'\fRs are not operated on directly,
but are passed to \f(CW\*(C`ILS\*(C'\fR methods as part of a transaction.  That
is, rather than having an item check itself in:
.PP
.Vb 1
\&        $item\->checkin;
.Ve
.PP
the code tells the \s-1ILS\s0 that the item has returned:
.PP
.Vb 1
\&        $ils\->checkin($item_id);
.Ve
.PP
Similarly, patron's don't check things out (a la,
\&\f(CW\*(C`$patron\->checkout($item)\*(C'\fR), but the \s-1ILS\s0 checks items out to
patrons.  This means that the methods that are defined for items
are, almost exclusively, methods to retrieve information about
the state of the item.
.ie n .IP """$item_id = $item\->id""" 4
.el .IP "\f(CW$item_id = $item\->id\fR" 4
.IX Item "$item_id = $item->id"
Return the item \s-1ID\s0, or barcode, of \f(CW$item\fR.
.ie n .IP """$title = $item\->title_id""" 4
.el .IP "\f(CW$title = $item\->title_id\fR" 4
.IX Item "$title = $item->title_id"
Return the title, or some other human-relevant description, of
the item.
.ie n .IP """$media_type = $item\->media_type""" 4
.el .IP "\f(CW$media_type = $item\->media_type\fR" 4
.IX Item "$media_type = $item->media_type"
Return the SIP-defined media type of the item.  The specification
provides the following definitions:
.Sp
.Vb 11
\&        000 Other
\&        001 Book
\&        002 Magazine
\&        003 Bound journal
\&        004 Audio tape
\&        005 Video tape
\&        006 CD/CDROM
\&        007 Diskette
\&        008 Book with diskette
\&        009 Book with CD
\&        010 Book with audio tape
.Ve
.Sp
The \s-1SIP\s0 server does not use the media type code to alter its
behavior at all; it merely passes it through to the self-service
terminal.  In particular, it does not set indicators related to
whether an item is magnetic, or whether it should be
desensitized, based on this return type.  The
\&\f(CW\*(C`$item\->magnetic_media\*(C'\fR method will be used for that purpose.
.ie n .IP """magnetic_media""" 4
.el .IP "\f(CWmagnetic_media\fR" 4
.IX Item "magnetic_media"
Is the item some form of magnetic media (eg, a video or a book
with an accompanying floppy)?  This method will not be called
unless
.Sp
.Vb 1
\&    $ils\->supports(\*(Aqmagnetic media\*(Aq)
.Ve
.Sp
returns \f(CW\*(C`true\*(C'\fR.
.Sp
If this method is defined, it is assumed to return either \f(CW\*(C`true\*(C'\fR
or \f(CW\*(C`false\*(C'\fR for every item.  If the magnetic media indication is
not supported by the \s-1ILS\s0, then the \s-1SIP\s0 server will indicate that
all items are 'Unknown'.
.ie n .IP """$locn = $item\->permanent_location""" 4
.el .IP "\f(CW$locn = $item\->permanent_location\fR" 4
.IX Item "$locn = $item->permanent_location"
Where does this item normally reside?  The protocol specification
is not clear on whether this is the item's \*(L"home branch\*(R", or a
location code within the branch, merely stating that it is, \*(L"The
location where an item is normally stored after being checked
in.\*(R"
.ie n .IP """$locn = $item\->current_location""" 4
.el .IP "\f(CW$locn = $item\->current_location\fR" 4
.IX Item "$locn = $item->current_location"
According to the protocol, \*(L"[T]he current location of the item.
[A checkin terminal] could set this field to the ... system
terminal location on a Checkin message.\*(R"
.ie n .IP """$props = $item\->sip_item_props""" 4
.el .IP "\f(CW$props = $item\->sip_item_props\fR" 4
.IX Item "$props = $item->sip_item_props"
Returns \*(L"item properties\*(R" associated with the item.  This is an
(optional) opaque string that is passed between the self-service
terminals and the \s-1ILS\s0.  It can be set by the terminal, and should
be stored in the \s-1ILS\s0 if it is.
.ie n .IP """$owner = $item\->owner""" 4
.el .IP "\f(CW$owner = $item\->owner\fR" 4
.IX Item "$owner = $item->owner"
The spec says, \*(L"This field might contain the name of the
institution or library that owns the item.\*(R"
.ie n .IP """$str = $item\->sip_circulation_status""" 4
.el .IP "\f(CW$str = $item\->sip_circulation_status\fR" 4
.IX Item "$str = $item->sip_circulation_status"
Returns a two-character string describing the circulation status
of the item, as defined in the specification:
.Sp
.Vb 10
\&        01 Other
\&        02 On order
\&        03 Available
\&        04 Charged
\&        05 Charged; not to be recalled until earliest recall date
\&        06 In process
\&        07 Recalled
\&        08 Waiting on hold shelf
\&        09 Waiting to be re\-shelved
\&        10 In transit between library locations
\&        11 Claimed returned
\&        12 Lost
\&        13 Missing
.Ve
.ie n .IP """$bool = $item\->available""" 4
.el .IP "\f(CW$bool = $item\->available\fR" 4
.IX Item "$bool = $item->available"
Is the item available?  That is, not checked out, and not on the
hold shelf?
.ie n .IP """@hold_queue = $item\->hold_queue""" 4
.el .IP "\f(CW@hold_queue = $item\->hold_queue\fR" 4
.IX Item "@hold_queue = $item->hold_queue"
Returns a list of the \f(CW$patron_id\fRs of the patrons that have
outstanding holds on the item.
.ie n .IP """$pos = $item\->hold_queue_position($patron_id)""" 4
.el .IP "\f(CW$pos = $item\->hold_queue_position($patron_id)\fR" 4
.IX Item "$pos = $item->hold_queue_position($patron_id)"
Returns the location of \f(CW$patron_id\fR in the hold queue for the
item, with '1' indicating the next person to receive the item.  A
return status of '0' indicates that \f(CW$patron_id\fR does not have a
hold on the item.
.ie n .IP """$date = $item\->recall_date"" =item ""$date = $item\->hold_pickup_date""" 4
.el .IP "\f(CW$date = $item\->recall_date\fR =item \f(CW$date = $item\->hold_pickup_date\fR" 4
.IX Item "$date = $item->recall_date =item $date = $item->hold_pickup_date"
These functions all return the corresponding date as a standard
SIP-format timestamp:
.Sp
.Vb 1
\&        YYYYMMDDZZZZHHMMSS
.Ve
.Sp
Where the \f(CW\*(AqZ\*(Aq\fR characters indicate spaces.
.ie n .IP """$date = $item\->due_date""" 4
.el .IP "\f(CW$date = $item\->due_date\fR" 4
.IX Item "$date = $item->due_date"
Returns the date the item is due.  The format for this timestamp
is not defined by the specification, but it should be something
simple for a human reader to understand.
.ie n .IP """$fee = $item\->fee""" 4
.el .IP "\f(CW$fee = $item\->fee\fR" 4
.IX Item "$fee = $item->fee"
The amount of the fee associated with borrowing this item.
.ie n .IP """$currency = $item\->fee_currency""" 4
.el .IP "\f(CW$currency = $item\->fee_currency\fR" 4
.IX Item "$currency = $item->fee_currency"
The currency in which the fee type above is denominated.  This
field is the \s-1ISO\s0 standard 4217 three-character currency code.  It
is highly unlikely that many systems will denominate fees in more
than one currency, however.
.ie n .IP """$type = $item\->sip_fee_type""" 4
.el .IP "\f(CW$type = $item\->sip_fee_type\fR" 4
.IX Item "$type = $item->sip_fee_type"
The type of fee being charged, as defined by the \s-1SIP\s0 protocol
specification:
.Sp
.Vb 9
\&        01 Other/unknown
\&        02 Administrative
\&        03 Damage
\&        04 Overdue
\&        05 Processing
\&        06 Rental
\&        07 Replacement
\&        08 Computer access charge
\&        09 Hold fee
.Ve
.ie n .IP """$mark = $item\->sip_security_marker""" 4
.el .IP "\f(CW$mark = $item\->sip_security_marker\fR" 4
.IX Item "$mark = $item->sip_security_marker"
The type of security system with which the item is tagged:
.Sp
.Vb 4
\&        00 Other
\&        01 None
\&        02 3M Tattle\-tape
\&        03 3M Whisper tape
.Ve
.ie n .IP """$msg = $item\->screen_msg""" 4
.el .IP "\f(CW$msg = $item\->screen_msg\fR" 4
.IX Item "$msg = $item->screen_msg"
.PD 0
.ie n .IP """$msg = $item\->print_line""" 4
.el .IP "\f(CW$msg = $item\->print_line\fR" 4
.IX Item "$msg = $item->print_line"
.PD
The usual suspects.
