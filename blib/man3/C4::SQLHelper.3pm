.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "C4::SQLHelper 3pm"
.TH C4::SQLHelper 3pm "2012-07-03" "perl v5.14.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
C4::SQLHelper \- Perl Module containing convenience functions for SQL Handling
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
use C4::SQLHelper;
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module contains routines for adding, modifying and Searching Data in MysqlDB
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.SS "SearchInTable"
.IX Subsection "SearchInTable"
.Vb 2
\&  $hashref = &SearchInTable($tablename,$data, $orderby, $limit, 
\&                      $columns_out, $filtercolumns, $searchtype);
.Ve
.PP
\&\f(CW$tablename\fR Name of the table (string)
.PP
\&\f(CW$data\fR may contain 
	\- string
.PP
.Vb 1
\&        \- data_hashref : will be considered as an AND of all the data searched
\&
\&        \- data_array_ref on hashrefs : Will be considered as an OR of Datahasref elements
.Ve
.PP
\&\f(CW$orderby\fR is an arrayref of hashref with fieldnames as key and 0 or 1 as values (\s-1ASCENDING\s0 or \s-1DESCENDING\s0 order)
.PP
\&\f(CW$limit\fR is an array ref on 2 values in order to limit results to \s-1MIN\s0..MAX
.PP
\&\f(CW$columns_out\fR is an array ref on field names is used to limit results on those fields (* by default)
.PP
\&\f(CW$filtercolums\fR is an array ref on field names : is used to limit expansion of research for strings
.PP
\&\f(CW$searchtype\fR is string Can be \*(L"start_with\*(R" or \*(L"exact\*(R"
.PP
This query builder is very limited, it should be replaced with DBIx::Class
or similar  very soon
Meanwhile adding support for special key '' in case of a data_hashref to
support filters of type
.PP
.Vb 1
\&  ( f1 = a OR f2 = a ) AND fx = b AND fy = c
.Ve
.PP
Call for the query above is:
.PP
.Vb 2
\&  SearchInTable($tablename, {\*(Aq\*(Aq => a, fx => b, fy => c}, $orderby, $limit,
\&                $columns_out, [f1, f2], \*(Aqexact\*(Aq);
.Ve
.PP
\&\s-1NOTE:\s0 Current implementation may remove parts of the iinput hashrefs. If that is a problem
a copy needs to be created in \fI_filter_fields()\fR below
.SS "InsertInTable"
.IX Subsection "InsertInTable"
.Vb 1
\&  $data_id_in_table = &InsertInTable($tablename,$data_hashref,$withprimarykeys);
.Ve
.PP
Insert Data in table and returns the id of the row inserted
.SS "UpdateInTable"
.IX Subsection "UpdateInTable"
.Vb 1
\&  $status = &UpdateInTable($tablename,$data_hashref);
.Ve
.PP
Update Data in table and returns the status of the operation
.SS "DeleteInTable"
.IX Subsection "DeleteInTable"
.Vb 1
\&  $status = &DeleteInTable($tablename,$data_hashref);
.Ve
.PP
Delete Data in table and returns the status of the operation
.SS "GetPrimaryKeys"
.IX Subsection "GetPrimaryKeys"
.Vb 1
\&  @primarykeys = &GetPrimaryKeys($tablename)
.Ve
.PP
Get the Primary Key field names of the table
.SS "clear_columns_cache"
.IX Subsection "clear_columns_cache"
.Vb 1
\&  C4::SQLHelper\->clear_columns_cache();
.Ve
.PP
cleans the internal cache of sysprefs. Please call this method if
you update a tables structure. Otherwise, your new changes
will not be seen by this process.
.SS "_get_columns"
.IX Subsection "_get_columns"
.Vb 1
\&    _get_columns($tablename)
.Ve
.PP
Given a tablename 
Returns a hashref of all the fieldnames of the table
With 
	Key
	Type
	Default
.SS "_filter_columns"
.IX Subsection "_filter_columns"
.RS 4
_filter_columns($tablename,$research, \f(CW$filtercolumns\fR)
.RE
.PP
Given 
	\- a tablename 
	\- indicator on purpose whether all fields should be returned or only non Primary keys
	\- array_ref to columns to limit to
.PP
Returns an array of all the fieldnames of the table
If it is not for research purpose, filter primary keys
.SS "_filter_fields"
.IX Subsection "_filter_fields"
.Vb 1
\&  _filter_fields
.Ve
.PP
Given 
	\- a tablename
	\- a string or a hashref (containing, fieldnames and datatofilter) or an arrayref to one of those elements
	\- an indicator of operation whether it is a wide research or a narrow one
	\- an array ref to columns to restrict string filter to.
.PP
Returns a ref of key array to use in \s-1SQL\s0 functions
and a ref to value array
