.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "C4::Reserves 3pm"
.TH C4::Reserves 3pm "2012-07-03" "perl v5.14.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
C4::Reserves \- Koha functions for dealing with reservation.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use C4::Reserves;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This modules provides somes functions to deal with reservations.
.PP
.Vb 10
\&  Reserves are stored in reserves table.
\&  The following columns contains important values :
\&  \- priority >0      : then the reserve is at 1st stage, and not yet affected to any item.
\&             =0      : then the reserve is being dealed
\&  \- found : NULL       : means the patron requested the 1st available, and we haven\*(Aqt choosen the item
\&            T(ransit)  : the reserve is linked to an item but is in transit to the pickup branch
\&            W(aiting)  : the reserve is linked to an item, is at the pickup branch, and is waiting on the hold shelf
\&            F(inished) : the reserve has been completed, and is done
\&  \- itemnumber : empty : the reserve is still unaffected to an item
\&                 filled: the reserve is attached to an item
\&  The complete workflow is :
\&  ==== 1st use case ====
\&  patron request a document, 1st available :                      P >0, F=NULL, I=NULL
\&  a library having it run "transfertodo", and clic on the list    
\&         if there is no transfer to do, the reserve waiting
\&         patron can pick it up                                    P =0, F=W,    I=filled 
\&         if there is a transfer to do, write in branchtransfer    P =0, F=T,    I=filled
\&           The pickup library recieve the book, it check in       P =0, F=W,    I=filled
\&  The patron borrow the book                                      P =0, F=F,    I=filled
\&  
\&  ==== 2nd use case ====
\&  patron requests a document, a given item,
\&    If pickup is holding branch                                   P =0, F=W,   I=filled
\&    If transfer needed, write in branchtransfer                   P =0, F=T,    I=filled
\&        The pickup library receive the book, it checks it in      P =0, F=W,    I=filled
\&  The patron borrow the book                                      P =0, F=F,    I=filled
.Ve
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.SS "AddReserve"
.IX Subsection "AddReserve"
.Vb 1
\&    AddReserve($branch,$borrowernumber,$biblionumber,$constraint,$bibitems,$priority,$resdate,$expdate,$notes,$title,$checkitem,$found)
.Ve
.SS "GetReservesFromBiblionumber"
.IX Subsection "GetReservesFromBiblionumber"
.Vb 1
\&  ($count, $title_reserves) = &GetReserves($biblionumber);
.Ve
.PP
This function gets the list of reservations for one \f(CW$biblionumber\fR, returning a count
of the reserves and an arrayref pointing to the reserves for \f(CW$biblionumber\fR.
.SS "GetReservesFromItemnumber"
.IX Subsection "GetReservesFromItemnumber"
.Vb 1
\& ( $reservedate, $borrowernumber, $branchcode ) = GetReservesFromItemnumber($itemnumber);
.Ve
.PP
\&\s-1TODO\s0 :: Description here
.SS "GetReservesFromBorrowernumber"
.IX Subsection "GetReservesFromBorrowernumber"
.Vb 1
\&    $borrowerreserv = GetReservesFromBorrowernumber($borrowernumber,$tatus);
.Ve
.PP
\&\s-1TODO\s0 :: Descritpion
.SS "CanBookBeReserved"
.IX Subsection "CanBookBeReserved"
.Vb 1
\&  $error = &CanBookBeReserved($borrowernumber, $biblionumber)
.Ve
.SS "CanItemBeReserved"
.IX Subsection "CanItemBeReserved"
.Vb 1
\&  $error = &CanItemBeReserved($borrowernumber, $itemnumber)
.Ve
.PP
This function return 1 if an item can be issued by this borrower.
.SS "GetReserveCount"
.IX Subsection "GetReserveCount"
.Vb 1
\&  $number = &GetReserveCount($borrowernumber);
.Ve
.PP
this function returns the number of reservation for a borrower given on input arg.
.SS "GetOtherReserves"
.IX Subsection "GetOtherReserves"
.Vb 1
\&  ($messages,$nextreservinfo)=$GetOtherReserves(itemnumber);
.Ve
.PP
Check queued list of this document and check if this document must be  transfered
.SS "GetReserveFee"
.IX Subsection "GetReserveFee"
.Vb 1
\&  $fee = GetReserveFee($borrowernumber,$biblionumber,$constraint,$biblionumber);
.Ve
.PP
Calculate the fee for a reserve
.SS "GetReservesToBranch"
.IX Subsection "GetReservesToBranch"
.Vb 1
\&  @transreserv = GetReservesToBranch( $frombranch );
.Ve
.PP
Get reserve list for a given branch
.SS "GetReservesForBranch"
.IX Subsection "GetReservesForBranch"
.Vb 1
\&  @transreserv = GetReservesForBranch($frombranch);
.Ve
.SS "CheckReserves"
.IX Subsection "CheckReserves"
.Vb 2
\&  ($status, $reserve, $all_reserves) = &CheckReserves($itemnumber);
\&  ($status, $reserve, $all_reserves) = &CheckReserves(undef, $barcode);
.Ve
.PP
Find a book in the reserves.
.PP
\&\f(CW$itemnumber\fR is the book's item number.
.PP
As I understand it, \f(CW&CheckReserves\fR looks for the given item in the
reserves. If it is found, that's a match, and \f(CW$status\fR is set to
\&\f(CW\*(C`Waiting\*(C'\fR.
.PP
Otherwise, it finds the most important item in the reserves with the
same biblio number as this book (I'm not clear on this) and returns it
with \f(CW$status\fR set to \f(CW\*(C`Reserved\*(C'\fR.
.PP
\&\f(CW&CheckReserves\fR returns a two-element list:
.PP
\&\f(CW$status\fR is either \f(CW\*(C`Waiting\*(C'\fR, \f(CW\*(C`Reserved\*(C'\fR (see above), or 0.
.PP
\&\f(CW$reserve\fR is the reserve item that matched. It is a
reference-to-hash whose keys are mostly the fields of the reserves
table in the Koha database.
.SS "CancelExpiredReserves"
.IX Subsection "CancelExpiredReserves"
.Vb 1
\&  CancelExpiredReserves();
.Ve
.PP
Cancels all reserves with an expiration date from before today.
.SS "AutoUnsuspendReserves"
.IX Subsection "AutoUnsuspendReserves"
.Vb 1
\&  AutoUnsuspendReserves();
.Ve
.PP
Unsuspends all suspended reserves with a suspend_until date from before today.
.SS "CancelReserve"
.IX Subsection "CancelReserve"
.Vb 1
\&  &CancelReserve($biblionumber, $itemnumber, $borrowernumber);
.Ve
.PP
Cancels a reserve.
.PP
Use either \f(CW$biblionumber\fR or \f(CW$itemnumber\fR to specify the item to
cancel, but not both: if both are given, \f(CW&CancelReserve\fR uses
\&\f(CW$itemnumber\fR.
.PP
\&\f(CW$borrowernumber\fR is the borrower number of the patron on whose
behalf the book was reserved.
.PP
If \f(CW$biblionumber\fR was given, \f(CW&CancelReserve\fR also adjusts the
priorities of the other people who are waiting on the book.
.SS "ModReserve"
.IX Subsection "ModReserve"
.Vb 1
\&  ModReserve($rank, $biblio, $borrower, $branch[, $itemnumber])
.Ve
.PP
Change a hold request's priority or cancel it.
.PP
\&\f(CW$rank\fR specifies the effect of the change.  If \f(CW$rank\fR
is 'W' or 'n', nothing happens.  This corresponds to leaving a
request alone when changing its priority in the holds queue
for a bib.
.PP
If \f(CW$rank\fR is 'del', the hold request is cancelled.
.PP
If \f(CW$rank\fR is an integer greater than zero, the priority of
the request is set to that value.  Since priority != 0 means
that the item is not waiting on the hold shelf, setting the 
priority to a non-zero value also sets the request's found
status and waiting date to \s-1NULL\s0.
.PP
The optional \f(CW$itemnumber\fR parameter is used only when
\&\f(CW$rank\fR is a non-zero integer; if supplied, the itemnumber 
of the hold request is set accordingly; if omitted, the itemnumber
is cleared.
.PP
\&\fB\s-1FIXME:\s0\fR Note that the forgoing can have the effect of causing
item-level hold requests to turn into title-level requests.  This
will be fixed once reserves has separate columns for requested
itemnumber and supplying itemnumber.
.SS "ModReserveFill"
.IX Subsection "ModReserveFill"
.Vb 1
\&  &ModReserveFill($reserve);
.Ve
.PP
Fill a reserve. If I understand this correctly, this means that the
reserved book has been found and given to the patron who reserved it.
.PP
\&\f(CW$reserve\fR specifies the reserve to fill. It is a reference-to-hash
whose keys are fields from the reserves table in the Koha database.
.SS "ModReserveStatus"
.IX Subsection "ModReserveStatus"
.Vb 1
\&  &ModReserveStatus($itemnumber, $newstatus);
.Ve
.PP
Update the reserve status for the active (priority=0) reserve.
.PP
\&\f(CW$itemnumber\fR is the itemnumber the reserve is on
.PP
\&\f(CW$newstatus\fR is the new status.
.SS "ModReserveAffect"
.IX Subsection "ModReserveAffect"
.Vb 1
\&  &ModReserveAffect($itemnumber,$borrowernumber,$diffBranchSend);
.Ve
.PP
This function affect an item and a status for a given reserve
The itemnumber parameter is used to find the biblionumber.
with the biblionumber & the borrowernumber, we can affect the itemnumber
to the correct reserve.
.PP
if \f(CW$transferToDo\fR is not set, then the status is set to \*(L"Waiting\*(R" as well.
otherwise, a transfer is on the way, and the end of the transfer will 
take care of the waiting status
.SS "ModReserveCancelAll"
.IX Subsection "ModReserveCancelAll"
.Vb 1
\&  ($messages,$nextreservinfo) = &ModReserveCancelAll($itemnumber,$borrowernumber);
.Ve
.PP
function to cancel reserv,check other reserves, and transfer document if it's necessary
.SS "ModReserveMinusPriority"
.IX Subsection "ModReserveMinusPriority"
.Vb 1
\&  &ModReserveMinusPriority($itemnumber,$borrowernumber,$biblionumber)
.Ve
.PP
Reduce the values of queuded list
.SS "GetReserveInfo"
.IX Subsection "GetReserveInfo"
.Vb 1
\&  &GetReserveInfo($borrowernumber,$biblionumber);
.Ve
.PP
Get item and borrower details for a current hold.
Current implementation this query should have a single result.
.SS "IsAvailableForItemLevelRequest"
.IX Subsection "IsAvailableForItemLevelRequest"
.Vb 1
\&  my $is_available = IsAvailableForItemLevelRequest($itemnumber);
.Ve
.PP
Checks whether a given item record is available for an
item-level hold request.  An item is available if
.PP
* it is not lost \s-1AND\s0 
* it is not damaged \s-1AND\s0 
* it is not withdrawn \s-1AND\s0 
* does not have a not for loan value > 0
.PP
Whether or not the item is currently on loan is 
also checked \- if the AllowOnShelfHolds system preference
is \s-1ON\s0, an item can be requested even if it is currently
on loan to somebody else.  If the system preference
is \s-1OFF\s0, an item that is currently checked out cannot
be the target of an item-level hold request.
.PP
Note that \fIIsAvailableForItemLevelRequest()\fR does not
check if the staff operator is authorized to place
a request on the item \- in particular,
this routine does not check IndependantBranches
and canreservefromotherbranches.
.SS "AlterPriority"
.IX Subsection "AlterPriority"
.Vb 1
\&  AlterPriority( $where, $borrowernumber, $biblionumber, $reservedate );
.Ve
.PP
This function changes a reserve's priority up, down, to the top, or to the bottom.
Input: \f(CW$where\fR is 'up', 'down', 'top' or 'bottom'. Biblionumber, Date reserve was placed
.SS "ToggleLowestPriority"
.IX Subsection "ToggleLowestPriority"
.Vb 1
\&  ToggleLowestPriority( $borrowernumber, $biblionumber );
.Ve
.PP
This function sets the lowestPriority field to true if is false, and false if it is true.
.SS "ToggleSuspend"
.IX Subsection "ToggleSuspend"
.Vb 1
\&  ToggleSuspend( $borrowernumber, $biblionumber );
.Ve
.PP
This function sets the suspend field to true if is false, and false if it is true.
If the reserve is currently suspended with a suspend_until date, that date will
be cleared when it is unsuspended.
.SS "SuspendAll"
.IX Subsection "SuspendAll"
.Vb 6
\&  SuspendAll(
\&      borrowernumber   => $borrowernumber,
\&      [ biblionumber   => $biblionumber, ]
\&      [ suspend_until  => $suspend_until, ]
\&      [ suspend        => $suspend ]
\&  );
\&
\&  This function accepts a set of hash keys as its parameters.
\&  It requires either borrowernumber or biblionumber, or both.
\&
\&  suspend_until is wholly optional.
.Ve
.SS "_FixPriority"
.IX Subsection "_FixPriority"
.Vb 1
\&  &_FixPriority($biblio,$borrowernumber,$rank,$ignoreSetLowestRank);
.Ve
.PP
Only used internally (so don't export it)
Changed how this functions works #
Now just gets an array of reserves in the rank order and updates them with
the array index (+1 as array starts from 0)
and if \f(CW$rank\fR is supplied will splice item from the array and splice it back in again
in new priority rank
.SS "_Findgroupreserve"
.IX Subsection "_Findgroupreserve"
.Vb 1
\&  @results = &_Findgroupreserve($biblioitemnumber, $biblionumber, $itemnumber);
.Ve
.PP
Looks for an item-specific match first, then for a title-level match, returning the
first match found.  If neither, then we look for a 3rd kind of match based on
reserve constraints.
.PP
\&\s-1TODO:\s0 add more explanation about reserve constraints
.PP
\&\f(CW&_Findgroupreserve\fR returns :
\&\f(CW@results\fR is an array of references-to-hash whose keys are mostly
fields from the reserves table of the Koha database, plus
\&\f(CW\*(C`biblioitemnumber\*(C'\fR.
.SS "_koha_notify_reserve"
.IX Subsection "_koha_notify_reserve"
.Vb 1
\&  _koha_notify_reserve( $itemnumber, $borrowernumber, $biblionumber );
.Ve
.PP
Sends a notification to the patron that their hold has been filled (through
ModReserveAffect, _not_ ModReserveFill)
.SS "_ShiftPriorityByDateAndPriority"
.IX Subsection "_ShiftPriorityByDateAndPriority"
.Vb 1
\&  $new_priority = _ShiftPriorityByDateAndPriority( $biblionumber, $reservedate, $priority );
.Ve
.PP
This increments the priority of all reserves after the one
with either the lowest date after \f(CW$reservedate\fR
or the lowest priority after \f(CW$priority\fR.
.PP
It effectively makes room for a new reserve to be inserted with a certain
priority, which is returned.
.PP
This is most useful when the reservedate can be set by the user.  It allows
the new reserve to be placed before other reserves that have a later
reservedate.  Since priority also is set by the form in reserves/request.pl
the sub accounts for that too.
.SS "MoveReserve"
.IX Subsection "MoveReserve"
.Vb 1
\&  MoveReserve( $itemnumber, $borrowernumber, $cancelreserve )
.Ve
.PP
Use when checking out an item to handle reserves
If \f(CW$cancelreserve\fR boolean is set to true, it will remove existing reserve
.SS "MergeHolds"
.IX Subsection "MergeHolds"
.Vb 1
\&  MergeHolds($dbh,$to_biblio, $from_biblio);
.Ve
.PP
This shifts the holds from \f(CW$from_biblio\fR to \f(CW$to_biblio\fR and reorders them by the date they were placed
.SS "ReserveSlip"
.IX Subsection "ReserveSlip"
.Vb 1
\&  ReserveSlip($branchcode, $borrowernumber, $biblionumber)
\&
\&  Returns letter hash ( see C4::Letters::GetPreparedLetter ) or undef
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Koha Development Team <http://koha\-community.org/>
