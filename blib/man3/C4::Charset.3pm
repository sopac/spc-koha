.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "C4::Charset 3pm"
.TH C4::Charset 3pm "2012-07-03" "perl v5.14.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
C4::Charset \- utilities for handling character set conversions.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use C4::Charset;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module contains routines for dealing with character set
conversions, particularly for \s-1MARC\s0 records.
.PP
A variety of character encodings are in use by various \s-1MARC\s0
standards, and even more character encodings are used by
non-standard \s-1MARC\s0 records.  The various \s-1MARC\s0 formats generally
do not do a good job of advertising a given record's character
encoding, and even when a record does advertise its encoding,
e.g., via the Leader/09, experience has shown that one cannot
trust it.
.PP
Ultimately, all \s-1MARC\s0 records are stored in Koha in \s-1UTF\-8\s0 and
must be converted from whatever the source character encoding is.
The goal of this module is to ensure that these conversions
take place accurately.  When a character conversion cannot take
place, or at least not accurately, the module was provide
enough information to allow user-facing code to inform the user
on how to deal with the situation.
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.SS "IsStringUTF8ish"
.IX Subsection "IsStringUTF8ish"
.Vb 1
\&  my $is_utf8 = IsStringUTF8ish($str);
.Ve
.PP
Determines if \f(CW$str\fR is valid \s-1UTF\-8\s0.  This can mean
one of two things:
.IP "\(bu" 4
The Perl \s-1UTF\-8\s0 flag is set and the string contains valid \s-1UTF\-8\s0.
.IP "\(bu" 4
The Perl \s-1UTF\-8\s0 flag is \fBnot\fR set, but the octets contain
valid \s-1UTF\-8\s0.
.PP
The function is named \f(CW\*(C`IsStringUTF8ish\*(C'\fR instead of \f(CW\*(C`IsStringUTF8\*(C'\fR 
because in one could be presented with a \s-1MARC\s0 blob that is
not actually in \s-1UTF\-8\s0 but whose sequence of octets appears to be
valid \s-1UTF\-8\s0.  The rest of the \s-1MARC\s0 character conversion functions 
will assume that this situation occur does not very often.
.SS "SetUTF8Flag"
.IX Subsection "SetUTF8Flag"
.Vb 1
\&  my $marc_record = SetUTF8Flag($marc_record, $nfd);
.Ve
.PP
This function sets the \s-1PERL\s0 \s-1UTF8\s0 flag for data.
It is required when using new_from_usmarc 
since MARC::File::USMARC does not handle \s-1PERL\s0 \s-1UTF8\s0 setting.
When editing unicode marc records fields and subfields, you
would end up in double encoding without using this function.
.PP
If \f(CW$nfd\fR is set, string normalization will use \s-1NFD\s0 instead of \s-1NFC\s0
.PP
\&\s-1FIXME\s0
In my opinion, this function belongs to MARC::Record and not
to this package.
But since it handles charset, and MARC::Record, it finds its way in that package
.SS "NormalizeString"
.IX Subsection "NormalizeString"
.Vb 1
\&    my $normalized_string=NormalizeString($string,$nfd,$transform);
.Ve
.PP
Given a string
nfd : If you want to set \s-1NFD\s0 and not \s-1NFC\s0
transform : If you expect all the signs to be removed
.PP
Sets the \s-1PERL\s0 \s-1UTF8\s0 Flag on your initial data if need be
and applies cleaning if required
.PP
Returns a utf8 \s-1NFC\s0 normalized string
.PP
Sample code :
   my \f(CW$string\fR=NormalizeString (\*(L"l'ornithoptA\*~Xre\*(R");
   #results into ornithoptA\*~Xre in \s-1NFC\s0 form and sets \s-1UTF8\s0 Flag
.SS "MarcToUTF8Record"
.IX Subsection "MarcToUTF8Record"
.Vb 2
\&  ($marc_record, $converted_from, $errors_arrayref) = MarcToUTF8Record($marc_blob, 
\&                                        $marc_flavour, [, $source_encoding]);
.Ve
.PP
Given a \s-1MARC\s0 blob or a \f(CW\*(C`MARC::Record\*(C'\fR, the \s-1MARC\s0 flavour, and an 
optional source encoding, return a \f(CW\*(C`MARC::Record\*(C'\fR that is 
converted to \s-1UTF\-8\s0.
.PP
The returned \f(CW$marc_record\fR is guaranteed to be in valid \s-1UTF\-8\s0, but
is not guaranteed to have been converted correctly.  Specifically,
if \f(CW$converted_from\fR is 'failed', the \s-1MARC\s0 record returned failed
character conversion and had each of its non-ASCII octets changed
to the Unicode replacement character.
.PP
If the source encoding was not specified, this routine will 
try to guess it; the character encoding used for a successful
conversion is returned in \f(CW$converted_from\fR.
.SS "SetMarcUnicodeFlag"
.IX Subsection "SetMarcUnicodeFlag"
.Vb 1
\&  SetMarcUnicodeFlag($marc_record, $marc_flavour);
.Ve
.PP
Set both the internal MARC::Record encoding flag
and the appropriate Leader/09 (\s-1MARC21\s0) or 
100/26\-29 (\s-1UNIMARC\s0) to indicate that the record
is in \s-1UTF\-8\s0.  Note that this does \fBnot\fR do
any actual character conversion.
.SS "StripNonXmlChars"
.IX Subsection "StripNonXmlChars"
.Vb 1
\&  my $new_str = StripNonXmlChars($old_str);
.Ve
.PP
Given a string, return a copy with the
characters that are illegal in \s-1XML\s0 
removed.
.PP
This function exists to work around a problem
that can occur with badly-encoded \s-1MARC\s0 records.
Specifically, if a \s-1UTF\-8\s0 \s-1MARC\s0 record also
has excape (\ex1b) characters, MARC::File::XML
will let the escape characters pass through
when \fIas_xml()\fR or \fIas_xml_record()\fR is called.  The
problem is that the escape character is not
legal in well-formed \s-1XML\s0 documents, so when
MARC::File::XML attempts to parse such a record,
the \s-1XML\s0 parser will fail.
.PP
Stripping such characters will allow a 
MARC::Record\->\fInew_from_xml()\fR
to work, at the possible risk of some data loss.
.SS "nsb_clean"
.IX Subsection "nsb_clean"
.RS 4
nsb_clean($string);
.RE
.PP
Removes Non Sorting Block characters
.SH "INTERNAL FUNCTIONS"
.IX Header "INTERNAL FUNCTIONS"
.SS "_default_marc21_charconv_to_utf8"
.IX Subsection "_default_marc21_charconv_to_utf8"
.Vb 1
\&  my ($new_marc_record, $guessed_charset) = _default_marc21_charconv_to_utf8($marc_record);
.Ve
.PP
Converts a \f(CW\*(C`MARC::Record\*(C'\fR of unknown character set to \s-1UTF\-8\s0,
first by trying a \s-1MARC\-8\s0 to \s-1UTF\-8\s0 conversion, then \s-1ISO\-8859\-1\s0
to \s-1UTF\-8\s0, then a default conversion that replaces each non-ASCII
character with the replacement character.
.PP
The \f(CW$guessed_charset\fR return value contains the character set
that resulted in a conversion to valid \s-1UTF\-8\s0; note that
if the \s-1MARC\-8\s0 and \s-1ISO\-8859\-1\s0 conversions failed, the value of
this is 'failed'.
.SS "_default_unimarc_charconv_to_utf8"
.IX Subsection "_default_unimarc_charconv_to_utf8"
.Vb 1
\&  my ($new_marc_record, $guessed_charset) = _default_unimarc_charconv_to_utf8($marc_record);
.Ve
.PP
Converts a \f(CW\*(C`MARC::Record\*(C'\fR of unknown character set to \s-1UTF\-8\s0,
first by trying a \s-1ISO\-5426\s0 to \s-1UTF\-8\s0 conversion, then \s-1ISO\-8859\-1\s0
to \s-1UTF\-8\s0, then a default conversion that replaces each non-ASCII
character with the replacement character.
.PP
The \f(CW$guessed_charset\fR return value contains the character set
that resulted in a conversion to valid \s-1UTF\-8\s0; note that
if the \s-1MARC\-8\s0 and \s-1ISO\-8859\-1\s0 conversions failed, the value of
this is 'failed'.
.SS "_marc_marc8_to_utf8"
.IX Subsection "_marc_marc8_to_utf8"
.Vb 1
\&  my @errors = _marc_marc8_to_utf8($marc_record, $marc_flavour, $source_encoding);
.Ve
.PP
Convert a \f(CW\*(C`MARC::Record\*(C'\fR to \s-1UTF\-8\s0 in-place from \s-1MARC\-8\s0.
If the conversion fails for some reason, an
appropriate messages will be placed in the returned
\&\f(CW@errors\fR array.
.SS "_marc_iso5426_to_utf8"
.IX Subsection "_marc_iso5426_to_utf8"
.Vb 1
\&  my @errors = _marc_iso5426_to_utf8($marc_record, $marc_flavour, $source_encoding);
.Ve
.PP
Convert a \f(CW\*(C`MARC::Record\*(C'\fR to \s-1UTF\-8\s0 in-place from \s-1ISO\-5426\s0.
If the conversion fails for some reason, an
appropriate messages will be placed in the returned
\&\f(CW@errors\fR array.
.PP
\&\s-1FIXME\s0 \- is \s-1ISO\-5426\s0 equivalent enough to \s-1MARC\-8\s0
that \f(CW\*(C`MARC::Charset\*(C'\fR can be used instead?
.SS "_marc_to_utf8_via_text_iconv"
.IX Subsection "_marc_to_utf8_via_text_iconv"
.Vb 1
\&  my @errors = _marc_to_utf8_via_text_iconv($marc_record, $marc_flavour, $source_encoding);
.Ve
.PP
Convert a \f(CW\*(C`MARC::Record\*(C'\fR to \s-1UTF\-8\s0 in-place using the
\&\f(CW\*(C`Text::Iconv\*(C'\fR \s-1CPAN\s0 module.  Any source encoding accepted
by the user's iconv installation should work.  If
the source encoding is not recognized on the user's 
server or the conversion fails for some reason,
appropriate messages will be placed in the returned
\&\f(CW@errors\fR array.
.SS "_marc_to_utf8_replacement_char"
.IX Subsection "_marc_to_utf8_replacement_char"
.Vb 1
\&  _marc_to_utf8_replacement_char($marc_record, $marc_flavour);
.Ve
.PP
Convert a \f(CW\*(C`MARC::Record\*(C'\fR to \s-1UTF\-8\s0 in-place, adopting the 
unsatisfactory method of replacing all non-ASCII (e.g.,
where the eight bit is set) octet with the Unicode
replacement character.  This is meant as a last-ditch
method, and would be best used as part of a \s-1UI\s0 that
lets a cataloguer pick various character conversions
until he or she finds the right one.
.SS "char_decode5426"
.IX Subsection "char_decode5426"
.Vb 1
\&  my $utf8string = char_decode5426($iso_5426_string);
.Ve
.PP
Converts a string from \s-1ISO\-5426\s0 to \s-1UTF\-8\s0.
.SH "AUTHOR"
.IX Header "AUTHOR"
Koha Development Team <http://koha\-community.org/>
.PP
Galen Charlton <galen.charlton@liblime.com>
