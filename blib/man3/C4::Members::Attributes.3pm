.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "C4::Members::Attributes 3pm"
.TH C4::Members::Attributes 3pm "2012-07-03" "perl v5.14.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
C4::Members::Attributes \- manage extend patron attributes
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  use C4::Members::Attributes;
\&  my $attributes = C4::Members::Attributes::GetBorrowerAttributes($borrowernumber);
.Ve
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.SS "GetBorrowerAttributes"
.IX Subsection "GetBorrowerAttributes"
.Vb 1
\&  my $attributes = C4::Members::Attributes::GetBorrowerAttributes($borrowernumber[, $opac_only]);
.Ve
.PP
Retrieve an arrayref of extended attributes associated with the
patron specified by \f(CW$borrowernumber\fR.  Each entry in the arrayref
is a hashref containing the following keys:
.PP
code (attribute type code)
description (attribute type description)
value (attribute value)
value_description (attribute value description (if associated with an authorised value))
password (password, if any, associated with attribute
.PP
If the \f(CW$opac_only\fR parameter is present and has a true value, only the attributes
marked for \s-1OPAC\s0 display are returned.
.SS "GetAttributes"
.IX Subsection "GetAttributes"
.Vb 1
\&  my $attributes = C4::Members::Attributes::GetAttributes([$opac_only]);
.Ve
.PP
Retrieve an arrayref of extended attribute codes
.SS "GetBorrowerAttributeValue"
.IX Subsection "GetBorrowerAttributeValue"
.Vb 1
\&  my $value = C4::Members::Attributes::GetBorrowerAttributeValue($borrowernumber, $attribute_code);
.Ve
.PP
Retrieve the value of an extended attribute \f(CW$attribute_code\fR associated with the
patron specified by \f(CW$borrowernumber\fR.
.SS "SearchIdMatchingAttribute"
.IX Subsection "SearchIdMatchingAttribute"
.Vb 1
\&  my $matching_borrowernumbers = C4::Members::Attributes::SearchIdMatchingAttribute($filter);
.Ve
.SS "CheckUniqueness"
.IX Subsection "CheckUniqueness"
.Vb 1
\&  my $ok = CheckUniqueness($code, $value[, $borrowernumber]);
.Ve
.PP
Given an attribute type and value, verify if would violate
a unique_id restriction if added to the patron.  The
optional \f(CW$borrowernumber\fR is the patron that the attribute
value would be added to, if known.
.PP
Returns false if the \f(CW$code\fR is not valid or the
value would violate the uniqueness constraint.
.SS "SetBorrowerAttributes"
.IX Subsection "SetBorrowerAttributes"
.Vb 1
\&  SetBorrowerAttributes($borrowernumber, [ { code => \*(AqCODE\*(Aq, value => \*(Aqvalue\*(Aq, password => \*(Aqpassword\*(Aq }, ... ] );
.Ve
.PP
Set patron attributes for the patron identified by \f(CW$borrowernumber\fR,
replacing any that existed previously.
.SS "DeleteBorrowerAttribute"
.IX Subsection "DeleteBorrowerAttribute"
.Vb 1
\&  DeleteBorrowerAttribute($borrowernumber, $attribute);
.Ve
.PP
Delete a borrower attribute for the patron identified by \f(CW$borrowernumber\fR and the attribute code of \f(CW$attribute\fR
.SS "UpdateBorrowerAttribute"
.IX Subsection "UpdateBorrowerAttribute"
.Vb 1
\&  UpdateBorrowerAttribute($borrowernumber, $attribute );
.Ve
.PP
Update a borrower attribute \f(CW$attribute\fR for the patron identified by \f(CW$borrowernumber\fR,
.SS "extended_attributes_code_value_arrayref"
.IX Subsection "extended_attributes_code_value_arrayref"
.Vb 2
\&   my $patron_attributes = "homeroom:1150605,grade:01,extradata:foobar";
\&   my $aref = extended_attributes_code_value_arrayref($patron_attributes);
.Ve
.PP
Takes a comma-delimited CSV-style string argument and returns the kind of data structure that SetBorrowerAttributes wants, 
namely a reference to array of hashrefs like:
 [ { code => '\s-1CODE\s0', value => 'value' }, { code => '\s-1CODE2\s0', value => 'othervalue' } ... ]
.PP
Caches Text::CSV parser object for efficiency.
.SS "extended_attributes_merge"
.IX Subsection "extended_attributes_merge"
.Vb 3
\&  my $old_attributes = extended_attributes_code_value_arrayref("homeroom:224,grade:04,deanslist:2007,deanslist:2008,somedata:xxx");
\&  my $new_attributes = extended_attributes_code_value_arrayref("homeroom:115,grade:05,deanslist:2009,extradata:foobar");
\&  my $merged = extended_attributes_merge($patron_attributes, $new_attributes, 1);
\&
\&  # assuming deanslist is a repeatable code, value same as:
\&  # $merged = extended_attributes_code_value_arrayref("homeroom:115,grade:05,deanslist:2007,deanslist:2008,deanslist:2009,extradata:foobar,somedata:xxx");
.Ve
.PP
Takes three arguments.  The first two are references to array of hashrefs, each like:
 [ { code => '\s-1CODE\s0', value => 'value' }, { code => '\s-1CODE2\s0', value => 'othervalue' } ... ]
.PP
The third option specifies whether repeatable codes are clobbered or collected.  True for non-clobber.
.PP
Returns one reference to (merged) array of hashref.
.PP
Caches results of \fIC4::Members::AttributeTypes::GetAttributeTypes_hashref\fR\|(1) for efficiency.
.SH "AUTHOR"
.IX Header "AUTHOR"
Koha Development Team <http://koha\-community.org/>
.PP
Galen Charlton <galen.charlton@liblime.com>
