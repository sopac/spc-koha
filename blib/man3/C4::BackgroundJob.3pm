.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "C4::BackgroundJob 3pm"
.TH C4::BackgroundJob 3pm "2012-07-03" "perl v5.14.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
C4::BackgroundJob \- manage long\-running jobs
initiated from the web staff interface
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 5
\& # start tracking a job
\& my $job = C4::BackgroundJob\->new($sessionID, $job_name, $job_invoker, $num_work_units);
\& my $jobID = $job\->id();
\& $job\->progress($work_units_processed);
\& $job\->finish($job_result_hashref);
\&
\& # get status and results of a job
\& my $job = C4::BackgroundJob\->fetch($sessionID, $jobID);
\& my $max_work_units = $job\->size();
\& my $work_units_processed = $job\->progress();
\& my $job_status = $job\->status();
\& my $job_name = $job\->name();
\& my $job_invoker = $job\->invoker();
\& my $results_hashref = $job\->results();
.Ve
.PP
This module manages tracking the progress and results
of (potentially) long-running jobs initiated from 
the staff user interface.  Such jobs can include
batch \s-1MARC\s0 and patron record imports.
.SH "METHODS"
.IX Header "METHODS"
.SS "new"
.IX Subsection "new"
.Vb 1
\& my $job = C4::BackgroundJob\->new($sessionID, $job_name, $job_invoker, $num_work_units);
.Ve
.PP
Create a new job object and set its status to 'running'.  \f(CW$num_work_units\fR
should be a number representing the size of the job; the units of the
job size are up to the caller and could be number of records, 
number of bytes, etc.
.SS "id"
.IX Subsection "id"
.Vb 1
\& my $jobID = $job\->id();
.Ve
.PP
Read-only accessor for job \s-1ID\s0.
.SS "name"
.IX Subsection "name"
.Vb 2
\& my $name = $job\->name();
\& $job\->name($name);
.Ve
.PP
Read/write accessor for job name.
.SS "invoker"
.IX Subsection "invoker"
.Vb 2
\& my $invoker = $job\->invoker();
\&i $job\->invoker($invoker);
.Ve
.PP
Read/write accessor for job invoker.
.SS "progress"
.IX Subsection "progress"
.Vb 2
\& my $progress = $job\->progress();
\& $job\->progress($progress);
.Ve
.PP
Read/write accessor for job progress.
.SS "status"
.IX Subsection "status"
.Vb 1
\& my $status = $job\->status();
.Ve
.PP
Read-only accessor for job status.
.SS "size"
.IX Subsection "size"
.Vb 2
\& my $size = $job\->size();
\& $job\->size($size);
.Ve
.PP
Read/write accessor for job size.
.SS "finish"
.IX Subsection "finish"
.Vb 1
\& $job\->finish($results_hashref);
.Ve
.PP
Mark the job as finished, setting its status to 'completed'.
\&\f(CW$results_hashref\fR should be a reference to a hash containing
the results of the job.
.SS "results"
.IX Subsection "results"
.Vb 1
\& my $results_hashref = $job\->results();
.Ve
.PP
Retrieve the results of the current job.  Returns undef 
if the job status is not 'completed'.
.SS "fetch"
.IX Subsection "fetch"
.Vb 1
\& my $job = C4::BackgroundJob\->fetch($sessionID, $jobID);
.Ve
.PP
Retrieve a job that has been serialized to the database. 
Returns \f(CW\*(C`undef\*(C'\fR if the job does not exist in the current 
session.
.SH "AUTHOR"
.IX Header "AUTHOR"
Koha Development Team <http://koha\-community.org/>
.PP
Galen Charlton <galen.charlton@liblime.com>
