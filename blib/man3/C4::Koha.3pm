.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "C4::Koha 3pm"
.TH C4::Koha 3pm "2012-07-03" "perl v5.14.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
C4::Koha \- Perl Module containing convenience functions for Koha scripts
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
use C4::Koha;
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Koha.pm provides many functions for Koha scripts.
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.SS "slashifyDate"
.IX Subsection "slashifyDate"
.Vb 1
\&  $slash_date = &slashifyDate($dash_date);
.Ve
.PP
Takes a string of the form \*(L"DD-MM-YYYY\*(R" (or anything separated by
dashes), converts it to the form \*(L"\s-1YYYY/MM/DD\s0\*(R", and returns the result.
.SS "GetSupportName"
.IX Subsection "GetSupportName"
.Vb 1
\&  $itemtypename = &GetSupportName($codestring);
.Ve
.PP
Returns a string with the name of the itemtype.
.SS "GetSupportList"
.IX Subsection "GetSupportList"
.Vb 1
\&  $itemtypes = &GetSupportList();
.Ve
.PP
Returns an array ref containing informations about Support (since itemtype is rather a circulation code when item-level-itypes is used).
.PP
build a \s-1HTML\s0 select with the following code :
.PP
\fIin \s-1PERL\s0 \s-1SCRIPT\s0\fR
.IX Subsection "in PERL SCRIPT"
.PP
.Vb 2
\&    my $itemtypes = GetSupportList();
\&    $template\->param(itemtypeloop => $itemtypes);
.Ve
.PP
\fIin \s-1TEMPLATE\s0\fR
.IX Subsection "in TEMPLATE"
.PP
.Vb 10
\&    <form action=\*(Aq<!\-\- TMPL_VAR name="script_name" \-\->\*(Aq method=post>
\&        <select name="itemtype">
\&            <option value="">Default</option>
\&        <!\-\- TMPL_LOOP name="itemtypeloop" \-\->
\&            <option value="<!\-\- TMPL_VAR name="itemtype" \-\->" <!\-\- TMPL_IF name="selected" \-\->selected<!\-\- /TMPL_IF \-\->> <!\-\-TMPL_IF Name="imageurl"\-\-><img alt="<!\-\- TMPL_VAR name="description" \-\->" src="<!\-\-TMPL_VAR Name="imageurl"\-\->><!\-\-TMPL_ELSE\-\->"<!\-\- TMPL_VAR name="description" \-\-><!\-\-/TMPL_IF\-\-></option>
\&        <!\-\- /TMPL_LOOP \-\->
\&        </select>
\&        <input type=text name=searchfield value="<!\-\- TMPL_VAR name="searchfield" \-\->">
\&        <input type="submit" value="OK" class="button">
\&    </form>
.Ve
.SS "GetItemTypes"
.IX Subsection "GetItemTypes"
.Vb 1
\&  $itemtypes = &GetItemTypes();
.Ve
.PP
Returns information about existing itemtypes.
.PP
build a \s-1HTML\s0 select with the following code :
.PP
\fIin \s-1PERL\s0 \s-1SCRIPT\s0\fR
.IX Subsection "in PERL SCRIPT"
.PP
.Vb 11
\&    my $itemtypes = GetItemTypes;
\&    my @itemtypesloop;
\&    foreach my $thisitemtype (sort keys %$itemtypes) {
\&        my $selected = 1 if $thisitemtype eq $itemtype;
\&        my %row =(value => $thisitemtype,
\&                    selected => $selected,
\&                    description => $itemtypes\->{$thisitemtype}\->{\*(Aqdescription\*(Aq},
\&                );
\&        push @itemtypesloop, \e%row;
\&    }
\&    $template\->param(itemtypeloop => \e@itemtypesloop);
.Ve
.PP
\fIin \s-1TEMPLATE\s0\fR
.IX Subsection "in TEMPLATE"
.PP
.Vb 10
\&    <form action=\*(Aq<!\-\- TMPL_VAR name="script_name" \-\->\*(Aq method=post>
\&        <select name="itemtype">
\&            <option value="">Default</option>
\&        <!\-\- TMPL_LOOP name="itemtypeloop" \-\->
\&            <option value="<!\-\- TMPL_VAR name="value" \-\->" <!\-\- TMPL_IF name="selected" \-\->selected<!\-\- /TMPL_IF \-\->><!\-\- TMPL_VAR name="description" \-\-></option>
\&        <!\-\- /TMPL_LOOP \-\->
\&        </select>
\&        <input type=text name=searchfield value="<!\-\- TMPL_VAR name="searchfield" \-\->">
\&        <input type="submit" value="OK" class="button">
\&    </form>
.Ve
.SS "getauthtypes"
.IX Subsection "getauthtypes"
.Vb 1
\&  $authtypes = &getauthtypes();
.Ve
.PP
Returns information about existing authtypes.
.PP
build a \s-1HTML\s0 select with the following code :
.PP
\fIin \s-1PERL\s0 \s-1SCRIPT\s0\fR
.IX Subsection "in PERL SCRIPT"
.PP
.Vb 11
\&   my $authtypes = getauthtypes;
\&   my @authtypesloop;
\&   foreach my $thisauthtype (keys %$authtypes) {
\&       my $selected = 1 if $thisauthtype eq $authtype;
\&       my %row =(value => $thisauthtype,
\&                selected => $selected,
\&                authtypetext => $authtypes\->{$thisauthtype}\->{\*(Aqauthtypetext\*(Aq},
\&            );
\&        push @authtypesloop, \e%row;
\&    }
\&    $template\->param(itemtypeloop => \e@itemtypesloop);
.Ve
.PP
\fIin \s-1TEMPLATE\s0\fR
.IX Subsection "in TEMPLATE"
.PP
.Vb 9
\&  <form action=\*(Aq<!\-\- TMPL_VAR name="script_name" \-\->\*(Aq method=post>
\&    <select name="authtype">
\&    <!\-\- TMPL_LOOP name="authtypeloop" \-\->
\&        <option value="<!\-\- TMPL_VAR name="value" \-\->" <!\-\- TMPL_IF name="selected" \-\->selected<!\-\- /TMPL_IF \-\->><!\-\- TMPL_VAR name="authtypetext" \-\-></option>
\&    <!\-\- /TMPL_LOOP \-\->
\&    </select>
\&    <input type=text name=searchfield value="<!\-\- TMPL_VAR name="searchfield" \-\->">
\&    <input type="submit" value="OK" class="button">
\&  </form>
.Ve
.SS "getframework"
.IX Subsection "getframework"
.Vb 1
\&  $frameworks = &getframework();
.Ve
.PP
Returns information about existing frameworks
.PP
build a \s-1HTML\s0 select with the following code :
.PP
\fIin \s-1PERL\s0 \s-1SCRIPT\s0\fR
.IX Subsection "in PERL SCRIPT"
.PP
.Vb 11
\&  my $frameworks = frameworks();
\&  my @frameworkloop;
\&  foreach my $thisframework (keys %$frameworks) {
\&    my $selected = 1 if $thisframework eq $frameworkcode;
\&    my %row =(value => $thisframework,
\&                selected => $selected,
\&                description => $frameworks\->{$thisframework}\->{\*(Aqframeworktext\*(Aq},
\&            );
\&    push @frameworksloop, \e%row;
\&  }
\&  $template\->param(frameworkloop => \e@frameworksloop);
.Ve
.PP
\fIin \s-1TEMPLATE\s0\fR
.IX Subsection "in TEMPLATE"
.PP
.Vb 10
\&  <form action=\*(Aq<!\-\- TMPL_VAR name="script_name" \-\->\*(Aq method=post>
\&    <select name="frameworkcode">
\&        <option value="">Default</option>
\&    <!\-\- TMPL_LOOP name="frameworkloop" \-\->
\&        <option value="<!\-\- TMPL_VAR name="value" \-\->" <!\-\- TMPL_IF name="selected" \-\->selected<!\-\- /TMPL_IF \-\->><!\-\- TMPL_VAR name="frameworktext" \-\-></option>
\&    <!\-\- /TMPL_LOOP \-\->
\&    </select>
\&    <input type=text name=searchfield value="<!\-\- TMPL_VAR name="searchfield" \-\->">
\&    <input type="submit" value="OK" class="button">
\&  </form>
.Ve
.SS "getframeworkinfo"
.IX Subsection "getframeworkinfo"
.Vb 1
\&  $frameworkinfo = &getframeworkinfo($frameworkcode);
.Ve
.PP
Returns information about an frameworkcode.
.SS "getitemtypeinfo"
.IX Subsection "getitemtypeinfo"
.Vb 1
\&  $itemtype = &getitemtype($itemtype);
.Ve
.PP
Returns information about an itemtype.
.SS "getitemtypeimagedir"
.IX Subsection "getitemtypeimagedir"
.Vb 1
\&  my $directory = getitemtypeimagedir( \*(Aqopac\*(Aq );
.Ve
.PP
pass in 'opac' or 'intranet'. Defaults to 'opac'.
.PP
returns the full path to the appropriate directory containing images.
.PP
\fI_getImagesFromDirectory\fR
.IX Subsection "_getImagesFromDirectory"
.PP
Find all of the image files in a directory in the filesystem
.PP
parameters: a directory name
.PP
returns: a list of images in that directory.
.PP
Notes: this does not traverse into subdirectories. See
_getSubdirectoryNames for help with that.
Images are assumed to be files with .gif or .png file extensions.
The image names returned do not have the directory name on them.
.PP
\fI_getSubdirectoryNames\fR
.IX Subsection "_getSubdirectoryNames"
.PP
Find all of the directories in a directory in the filesystem
.PP
parameters: a directory name
.PP
returns: a list of subdirectories in that directory.
.PP
Notes: this does not traverse into subdirectories. Only the first
level of subdirectories are returned.
The directory names returned don't have the parent directory name on them.
.PP
\fIgetImageSets\fR
.IX Subsection "getImageSets"
.PP
returns: a listref of hashrefs. Each hash represents another collection of images.
.PP
.Vb 3
\& { imagesetname => \*(Aqnpl\*(Aq, # the name of the image set (npl is the original one)
\&         images => listref of image hashrefs
\& }
.Ve
.PP
each image is represented by a hashref like this:
.PP
.Vb 6
\& { KohaImage     => \*(Aqnpl/image.gif\*(Aq,
\&   StaffImageUrl => \*(Aq/intranet\-tmpl/prog/img/itemtypeimg/npl/image.gif\*(Aq,
\&   OpacImageURL  => \*(Aq/opac\-tmpl/prog/itemtypeimg/npl/image.gif\*(Aq
\&   checked       => 0 or 1: was this the image passed to this method?
\&                    Note: I\*(Aqd like to remove this somehow.
\& }
.Ve
.SS "GetPrinters"
.IX Subsection "GetPrinters"
.Vb 2
\&  $printers = &GetPrinters();
\&  @queues = keys %$printers;
.Ve
.PP
Returns information about existing printer queues.
.PP
\&\f(CW$printers\fR is a reference-to-hash whose keys are the print queues
defined in the printers table of the Koha database. The values are
references-to-hash, whose keys are the fields in the printers table.
.SS "GetPrinter"
.IX Subsection "GetPrinter"
.Vb 1
\&  $printer = GetPrinter( $query, $printers );
.Ve
.SS "getnbpages"
.IX Subsection "getnbpages"
Returns the number of pages to display in a pagination bar, given the number
of items and the number of items per page.
.SS "getallthemes"
.IX Subsection "getallthemes"
.Vb 2
\&  (@themes) = &getallthemes(\*(Aqopac\*(Aq);
\&  (@themes) = &getallthemes(\*(Aqintranet\*(Aq);
.Ve
.PP
Returns an array of all available themes.
.SS "get_infos_of"
.IX Subsection "get_infos_of"
Return a href where a key is associated to a href. You give a query,
the name of the key among the fields returned by the query. If you
also give as third argument the name of the value, the function
returns a href of scalar. The optional 4th argument is an arrayref of
items passed to the \f(CW\*(C`execute()\*(C'\fR call. It is designed to bind
parameters to any placeholders in your \s-1SQL\s0.
.PP
.Vb 6
\&  my $query = \*(Aq
\&SELECT itemnumber,
\&       notforloan,
\&       barcode
\&  FROM items
\&\*(Aq;
\&
\&  # generic href of any information on the item, href of href.
\&  my $iteminfos_of = get_infos_of($query, \*(Aqitemnumber\*(Aq);
\&  print $iteminfos_of\->{$itemnumber}{barcode};
\&
\&  # specific information, href of scalar
\&  my $barcode_of_item = get_infos_of($query, \*(Aqitemnumber\*(Aq, \*(Aqbarcode\*(Aq);
\&  print $barcode_of_item\->{$itemnumber};
.Ve
.SS "get_notforloan_label_of"
.IX Subsection "get_notforloan_label_of"
.Vb 1
\&  my $notforloan_label_of = get_notforloan_label_of();
.Ve
.PP
Each authorised value of notforloan (information available in items and
itemtypes) is link to a single label.
.PP
Returns a href where keys are authorised values and values are corresponding
labels.
.PP
.Vb 7
\&  foreach my $authorised_value (keys %{$notforloan_label_of}) {
\&    printf(
\&        "authorised_value: %s => %s\en",
\&        $authorised_value,
\&        $notforloan_label_of\->{$authorised_value}
\&    );
\&  }
.Ve
.SS "displayServers"
.IX Subsection "displayServers"
.Vb 3
\&   my $servers = displayServers();
\&   my $servers = displayServers( $position );
\&   my $servers = displayServers( $position, $type );
.Ve
.PP
displayServers returns a listref of hashrefs, each containing
information about available z3950 servers. Each hashref has a format
like:
.PP
.Vb 11
\&    {
\&      \*(Aqchecked\*(Aq    => \*(Aqchecked\*(Aq,
\&      \*(Aqencoding\*(Aq   => \*(AqMARC\-8\*(Aq
\&      \*(Aqicon\*(Aq       => undef,
\&      \*(Aqid\*(Aq         => \*(AqLIBRARY OF CONGRESS\*(Aq,
\&      \*(Aqlabel\*(Aq      => \*(Aq\*(Aq,
\&      \*(Aqname\*(Aq       => \*(Aqserver\*(Aq,
\&      \*(Aqopensearch\*(Aq => \*(Aq\*(Aq,
\&      \*(Aqvalue\*(Aq      => \*(Aqz3950.loc.gov:7090/\*(Aq,
\&      \*(Aqzed\*(Aq        => 1,
\&    },
.Ve
.SS "GetKohaImageurlFromAuthorisedValues"
.IX Subsection "GetKohaImageurlFromAuthorisedValues"
\&\f(CW$authhorised_value\fR = GetKohaImageurlFromAuthorisedValues( \f(CW$category\fR, \f(CW$authvalcode\fR );
.PP
Return the first url of the authorised value image represented by \f(CW$lib\fR.
.SS "GetAuthValCode"
.IX Subsection "GetAuthValCode"
.Vb 1
\&  $authvalcode = GetAuthValCode($kohafield,$frameworkcode);
.Ve
.SS "GetAuthValCodeFromField"
.IX Subsection "GetAuthValCodeFromField"
.Vb 1
\&  $authvalcode = GetAuthValCodeFromField($field,$subfield,$frameworkcode);
.Ve
.PP
\&\f(CW$subfield\fR can be undefined
.SS "GetAuthorisedValues"
.IX Subsection "GetAuthorisedValues"
.Vb 1
\&  $authvalues = GetAuthorisedValues([$category], [$selected]);
.Ve
.PP
This function returns all authorised values from the'authorised_value' table in a reference to array of hashrefs.
.PP
\&\f(CW$category\fR returns authorised values for just one category (optional).
.PP
\&\f(CW$opac\fR If set to a true value, displays \s-1OPAC\s0 descriptions rather than normal ones when they exist.
.SS "GetAuthorisedValueCategories"
.IX Subsection "GetAuthorisedValueCategories"
.Vb 1
\&  $auth_categories = GetAuthorisedValueCategories();
.Ve
.PP
Return an arrayref of all of the available authorised
value categories.
.SS "GetAuthorisedValueByCode"
.IX Subsection "GetAuthorisedValueByCode"
\&\f(CW$authhorised_value\fR = GetAuthorisedValueByCode( \f(CW$category\fR, \f(CW$authvalcode\fR );
.PP
Return the lib attribute from authorised_values from the row identified
by the passed category and code
.SS "GetKohaAuthorisedValues"
.IX Subsection "GetKohaAuthorisedValues"
Takes \f(CW$kohafield\fR, \f(CW$fwcode\fR as parameters.
.PP
If \f(CW$opac\fR parameter is set to a true value, displays \s-1OPAC\s0 descriptions rather than normal ones when they exist.
.PP
Returns hashref of Code => description
.PP
Returns undef if no authorised value category is defined for the kohafield.
.SS "GetKohaAuthorisedValuesFromField"
.IX Subsection "GetKohaAuthorisedValuesFromField"
Takes \f(CW$field\fR, \f(CW$subfield\fR, \f(CW$fwcode\fR as parameters.
.PP
If \f(CW$opac\fR parameter is set to a true value, displays \s-1OPAC\s0 descriptions rather than normal ones when they exist.
\&\f(CW$subfield\fR can be undefined
.PP
Returns hashref of Code => description
.PP
Returns undef if no authorised value category is defined for the given field and subfield
.SS "xml_escape"
.IX Subsection "xml_escape"
.Vb 1
\&  my $escaped_string = C4::Koha::xml_escape($string);
.Ve
.PP
Convert &, <, >, ', and " in a string to \s-1XML\s0 entities
.SS "GetKohaAuthorisedValueLib"
.IX Subsection "GetKohaAuthorisedValueLib"
Takes \f(CW$category\fR, \f(CW$authorised_value\fR as parameters.
.PP
If \f(CW$opac\fR parameter is set to a true value, displays \s-1OPAC\s0 descriptions rather than normal ones when they exist.
.PP
Returns authorised value description
.SS "display_marc_indicators"
.IX Subsection "display_marc_indicators"
.Vb 1
\&  my $display_form = C4::Koha::display_marc_indicators($field);
.Ve
.PP
\&\f(CW$field\fR is a MARC::Field object
.PP
Generate a display form of the indicators of a variable
\&\s-1MARC\s0 field, replacing any blanks with '#'.
.SS "GetDailyQuote($opts)"
.IX Subsection "GetDailyQuote($opts)"
Takes a hashref of options
.PP
Currently supported options are:
.PP
\&'id'        An exact quote id
\&'random'    Select a random quote
noop        When no option is passed in, this sub will return the quote timestamped for the current day
.PP
The function returns an anonymous hash following this format:
.PP
.Vb 6
\&        {
\&          \*(Aqsource\*(Aq => \*(Aqsource\-of\-quote\*(Aq,
\&          \*(Aqtimestamp\*(Aq => \*(Aqtimestamp\-value\*(Aq,
\&          \*(Aqtext\*(Aq => \*(Aqtext\-of\-quote\*(Aq,
\&          \*(Aqid\*(Aq => \*(Aqquote\-id\*(Aq
\&        };
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Koha Team
