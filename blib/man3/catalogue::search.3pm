.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "catalogue::search 3pm"
.TH catalogue::search 3pm "2012-07-03" "perl v5.14.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
search \- a search script for finding records in a Koha system (Version 3)
.SH "OVERVIEW"
.IX Header "OVERVIEW"
This script utilizes a new search \s-1API\s0 for Koha 3. It is designed to be 
simple to use and configure, yet capable of performing feats like stemming,
field weighting, relevance ranking, support for multiple  query language
formats (\s-1CCL\s0, \s-1CQL\s0, \s-1PQF\s0), full support for the bib1 attribute set, extended
attribute sets defined in Zebra profiles, access to the full range of Z39.50
and \s-1SRU\s0 query options, federated searches on Z39.50/SRU targets, etc.
.PP
The \s-1API\s0 as represented in this script is mostly sound, even if the individual
functions in Search.pm and Koha.pm need to be cleaned up. Of course, you are
free to disagree :\-)
.PP
I will attempt to describe what is happening at each part of this script.
\&\*(-- Joshua Ferraro <jmf \s-1AT\s0 liblime \s-1DOT\s0 com>
.SS "\s-1INTRO\s0"
.IX Subsection "INTRO"
This script performs two functions:
.IP "1. interacts with Koha to retrieve and display the results of a search" 4
.IX Item "1. interacts with Koha to retrieve and display the results of a search"
.PD 0
.IP "2. loads the advanced search page" 4
.IX Item "2. loads the advanced search page"
.PD
.PP
These two functions share many of the same variables and modules, so the first
task is to load what they have in common and determine which template to use.
Once determined, proceed to only load the variables and procedures necessary
for that function.
.SS "\s-1LOADING\s0 \s-1ADVANCED\s0 \s-1SEARCH\s0 \s-1PAGE\s0"
.IX Subsection "LOADING ADVANCED SEARCH PAGE"
This is fairly straightforward, and I won't go into detail ;\-)
.SS "\s-1PERFORMING\s0 A \s-1SEARCH\s0"
.IX Subsection "PERFORMING A SEARCH"
If we're performing a search, this script  performs three primary
operations:
.IP "1. builds query strings (yes, plural)" 4
.IX Item "1. builds query strings (yes, plural)"
.PD 0
.IP "2. perform the search and return the results array" 4
.IX Item "2. perform the search and return the results array"
.IP "3. build the \s-1HTML\s0 for output to the template" 4
.IX Item "3. build the HTML for output to the template"
.PD
.PP
There are several additional secondary functions performed that I will
not cover in detail.
.PP
\fI1. Building Query Strings\fR
.IX Subsection "1. Building Query Strings"
.PP
There are several types of queries needed in the process of search and retrieve:
.ie n .IP "1 $query \- the fully-built query passed to zebra" 4
.el .IP "1 \f(CW$query\fR \- the fully-built query passed to zebra" 4
.IX Item "1 $query - the fully-built query passed to zebra"
This is the most complex query that needs to be built. The original design goal 
was to use a custom \s-1CCL2PQF\s0 query parser to translate an incoming \s-1CCL\s0 query into
a multi-leaf query to pass to Zebra. It needs to be multi-leaf to allow field 
weighting, koha-specific relevance ranking, and stemming. When I have a chance 
I'll try to flesh out this section to better explain.
.Sp
This query incorporates query profiles that aren't compatible with most non-Zebra 
Z39.50 targets to acomplish the field weighting and relevance ranking.
.ie n .IP "2 $simple_query \- a simple query that doesn't contain the field weighting, stemming, etc., suitable to pass off to other search targets" 4
.el .IP "2 \f(CW$simple_query\fR \- a simple query that doesn't contain the field weighting, stemming, etc., suitable to pass off to other search targets" 4
.IX Item "2 $simple_query - a simple query that doesn't contain the field weighting, stemming, etc., suitable to pass off to other search targets"
This query is just the user's query expressed in \s-1CCL\s0 \s-1CQL\s0, or \s-1PQF\s0 for passing to a 
non-zebra Z39.50 target (one that doesn't support the extended profile that Zebra does).
.ie n .IP "3 $query_cgi \- passed to the template / saved for future refinements of the query (by user)" 4
.el .IP "3 \f(CW$query_cgi\fR \- passed to the template / saved for future refinements of the query (by user)" 4
.IX Item "3 $query_cgi - passed to the template / saved for future refinements of the query (by user)"
This is a simple string that completely expresses the query as a \s-1CGI\s0 string that
can be used for future refinements of the query or as a part of a history feature.
.ie n .IP "4 $query_desc \- Human search description \- what the user sees in search feedback area" 4
.el .IP "4 \f(CW$query_desc\fR \- Human search description \- what the user sees in search feedback area" 4
.IX Item "4 $query_desc - Human search description - what the user sees in search feedback area"
This is a simple string that is human readable. It will contain '=', ',', etc.
.PP
\fI2. Perform the Search\fR
.IX Subsection "2. Perform the Search"
.PP
This section takes the query strings and performs searches on the named servers,
including the Koha Zebra server, stores the results in a deeply nested object, 
builds 'faceted results', and returns these objects.
.PP
\fI3. Build \s-1HTML\s0\fR
.IX Subsection "3. Build HTML"
.PP
The final major section of this script takes the objects collected thusfar and 
builds the \s-1HTML\s0 for output to the template and user.
.PP
\fIAdditional Notes\fR
.IX Subsection "Additional Notes"
.PP
Not yet completed...
