.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "C4::Tags 3pm"
.TH C4::Tags 3pm "2012-07-03" "perl v5.14.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SS "get_count_by_tag_status"
.IX Subsection "get_count_by_tag_status"
.Vb 1
\&  get_count_by_tag_status($status);
.Ve
.PP
Takes a status and gets a count of tags with that status
.SH "C4::Tags.pm \- Support for user tagging of biblios."
.IX Header "C4::Tags.pm - Support for user tagging of biblios."
More verose debugging messages are sent in the presence of non-zero \f(CW$ENV\fR{\*(L"\s-1DEBUG\s0\*(R"}.
.SS "add_tag(biblionumber,term[,borrowernumber])"
.IX Subsection "add_tag(biblionumber,term[,borrowernumber])"
\fI\s-1TO\s0 \s-1DO:\s0 Add real perldoc\fR
.IX Subsection "TO DO: Add real perldoc"
.SS "External Dictionary (Ispell) [Recommended]"
.IX Subsection "External Dictionary (Ispell) [Recommended]"
An external dictionary can be used as a means of \*(L"pre-populating\*(R" and tracking
allowed terms based on the widely available Ispell dictionary.  This can be the system
dictionary or a personal version, but in order to support whitelisting, it must be
editable to the process running Koha.
.PP
To enable, enter the absolute path to the ispell dictionary in the system
preference \*(L"TagsExternalDictionary\*(R".
.PP
Using external Ispell is recommended for both ease of use and performance.  Note that any
language version of Ispell can be installed.  It is also possible to modify the dictionary 
at the command line to affect the desired content.
.PP
\&\s-1WARNING:\s0 The default Ispell dictionary includes (properly spelled) obscenities!  Users 
should build their own wordlist and recompile Ispell based on it.  See man ispell for 
instructions.
.SS "Table Structure"
.IX Subsection "Table Structure"
The tables used by tags are:
	tags_all
	tags_index
	tags_approval
	tags_blacklist
.PP
Your first thought may be that this looks a little complicated.  It is, but only because
it has to be.  I'll try to explain.
.PP
tags_all \- This table would be all we really need if we didn't care about moderation or
performance or tags disappearing when borrowers are removed.  Too bad, we do.  Otherwise
though, it contains all the relevant info about a given tag:
	tag_id         \- unique id number for it
	borrowernumber \- user that entered it
	biblionumber   \- book record it is attached to
	term           \- tag \*(L"term\*(R" itself
	language       \- perhaps used later to influence weighting
	date_created   \- date and time it was created
.PP
tags_approval \- Since we need to provide moderation, this table is used to track it.  If no
external dictionary is used, this table is the sole reference for approval and rejection.
With an external dictionary, it tracks pending terms and past whitelist/blacklist actions.
This could be called an \*(L"approved terms\*(R" table.  See above regarding the External Dictionary.
	term           \- tag \*(L"term\*(R" itself 
	approved       \- Negative, 0 or positive if tag is rejected, pending or approved.
	date_approved  \- date of last action
	approved_by    \- staffer performing the last action
	weight_total   \- total occurance of term in any biblio by any users
.PP
tags_index \- This table is for performance, because by far the most common operation will 
be fetching tags for a list of search results.  We will have a set of biblios, and we will
want \s-1ONLY\s0 their approved tags and overall weighting.  While we could implement a query that
would traverse tags_all filtered against tags_approval, the performance implications of
trying to calculate that and the \*(L"weight\*(R" (number of times a tag appears) on the fly are drastic.
	term           \- approved term as it appears in tags_approval
	biblionumber   \- book record it is attached to
	weight         \- number of times tag applied by any user
.PP
tags_blacklist \- A set of regular expression filters.  Unsurprisingly, these should be perl\-
compatible (\s-1PCRE\s0) for your version of perl.  Since this is a blacklist, a term will be
blocked if it matches any of the given patterns.  \s-1WARNING:\s0 do not add blacklist regexps
if you do not understand their operation and interaction.  It is quite easy to define too
simple or too complex a regexp and effectively block all terms.  The blacklist operation is 
fairly resource intensive, since every line of tags_blacklist will need to be read and compared.
It is recommended that tags_blacklist be used minimally, and only by an administrator with an
understanding of regular expression syntax and performance.
.PP
So the best way to think about the different tables is that they are each tailored to a certain
use.  Note that tags_approval and tags_index do not rely on the user's borrower mapping, so
the tag population can continue to grow even if a user (along with their corresponding
rows in tags_all) is removed.
.SS "Tricks"
.IX Subsection "Tricks"
If you want to auto-populate some tags for debugging, do something like this:
.PP
mysql> select biblionumber from biblio where title \s-1LIKE\s0 \*(L"%Health%\*(R";
+\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
| biblionumber |
+\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
|           18 | 
|           22 | 
|           24 | 
|           30 | 
|           44 | 
|           45 | 
|           46 | 
|           49 | 
|          111 | 
|          113 | 
|          128 | 
|          146 | 
|          155 | 
|          518 | 
|          522 | 
|          524 | 
|          530 | 
|          544 | 
|          545 | 
|          546 | 
|          549 | 
|          611 | 
|          613 | 
|          628 | 
|          646 | 
|          655 | 
+\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
26 rows in set (0.00 sec)
.PP
Then, take those numbers and type/pipe them into this perl command line:
perl \-ne 'use C4::Tags qw(get_tags add_tag); use Data::Dumper;chomp; add_tag($_,\*(L"health\*(R",51,1); print Dumper get_tags({limit=>5,term=>\*(L"health\*(R",});'
.PP
Note, the borrowernumber in this example is 51.  Use your own or any arbitrary valid borrowernumber.
