.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "C4::Creators::Layout 3pm"
.TH C4::Creators::Layout 3pm "2012-07-03" "perl v5.14.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
C4::Labels::Layout \-A class for creating and manipulating layout objects in Koha
.SH "ABSTRACT"
.IX Header "ABSTRACT"
This module provides methods for creating, retrieving, and otherwise manipulating label layout objects used by Koha to create and export labels.
.SH "METHODS"
.IX Header "METHODS"
.SS "\fInew()\fP"
.IX Subsection "new()"
.Vb 2
\&    Invoking the I<new> method constructs a new layout object containing the default values for a layout.
\&    The following parameters are optionally accepted as key => value pairs:
\&
\&        C<barcode_type>         Defines the barcode type to be used on labels. NOTE: At present only the following barcode types are supported in the label creator code:
.Ve
.IP ". \s-1CODE39\s0          = Code 3 of 9" 9
.IX Item ". CODE39          = Code 3 of 9"
.PD 0
.IP ". \s-1CODE39MOD\s0       = Code 3 of 9 with modulo 43 checksum" 9
.IX Item ". CODE39MOD       = Code 3 of 9 with modulo 43 checksum"
.IP ". \s-1CODE39MOD10\s0     = Code 3 of 9 with modulo 10 checksum" 9
.IX Item ". CODE39MOD10     = Code 3 of 9 with modulo 10 checksum"
.ie n .IP ". \s-1COOP2OF5\s0        = A varient of 2 of 5 barcode based on \s-1NEC\s0's ""Process 8000"" code" 9
.el .IP ". \s-1COOP2OF5\s0        = A varient of 2 of 5 barcode based on \s-1NEC\s0's ``Process 8000'' code" 9
.IX Item ". COOP2OF5        = A varient of 2 of 5 barcode based on NEC's Process 8000 code"
.IP ". \s-1INDUSTRIAL2OF5\s0  = The standard 2 of 5 barcode (a binary level bar code developed by Identicon Corp. and Computer Identics Corp. in 1970)" 9
.IX Item ". INDUSTRIAL2OF5  = The standard 2 of 5 barcode (a binary level bar code developed by Identicon Corp. and Computer Identics Corp. in 1970)"
.PD
.PP
.Vb 1
\&        C<printing_type>        Defines the general layout to be used on labels. NOTE: At present there are only five printing types supported in the label creator code:
.Ve
.IP ". \s-1BIB\s0     = Only the bibliographic data is printed" 9
.IX Item ". BIB     = Only the bibliographic data is printed"
.PD 0
.IP ". \s-1BARBIB\s0  = Barcode proceeds bibliographic data" 9
.IX Item ". BARBIB  = Barcode proceeds bibliographic data"
.IP ". \s-1BIBBAR\s0  = Bibliographic data proceeds barcode" 9
.IX Item ". BIBBAR  = Bibliographic data proceeds barcode"
.IP ". \s-1ALT\s0     = Barcode and bibliographic data are printed on alternating labels" 9
.IX Item ". ALT     = Barcode and bibliographic data are printed on alternating labels"
.IP ". \s-1BAR\s0     = Only the barcode is printed" 9
.IX Item ". BAR     = Only the barcode is printed"
.PD
.PP
.Vb 3
\&        C<layout_name>          The descriptive name for this layout.
\&        C<guidebox>             Setting this to \*(Aq1\*(Aq will result in a guide box being drawn around the labels marking the edge of each label
\&        C<font>                 Defines the type of font to be used on labels. NOTE: The following fonts are available by default on most systems:
.Ve
.IP ". \s-1TR\s0      = Times-Roman" 9
.IX Item ". TR      = Times-Roman"
.PD 0
.IP ". \s-1TB\s0      = Times Bold" 9
.IX Item ". TB      = Times Bold"
.IP ". \s-1TI\s0      = Times Italic" 9
.IX Item ". TI      = Times Italic"
.IP ". \s-1TBI\s0     = Times Bold Italic" 9
.IX Item ". TBI     = Times Bold Italic"
.IP ". C       = Courier" 9
.IX Item ". C       = Courier"
.IP ". \s-1CB\s0      = Courier Bold" 9
.IX Item ". CB      = Courier Bold"
.IP ". \s-1CO\s0      = Courier Oblique (Italic)" 9
.IX Item ". CO      = Courier Oblique (Italic)"
.IP ". \s-1CBO\s0     = Courier Bold Oblique" 9
.IX Item ". CBO     = Courier Bold Oblique"
.IP ". H       = Helvetica" 9
.IX Item ". H       = Helvetica"
.IP ". \s-1HB\s0      = Helvetica Bold" 9
.IX Item ". HB      = Helvetica Bold"
.IP ". \s-1HBO\s0     = Helvetical Bold Oblique" 9
.IX Item ". HBO     = Helvetical Bold Oblique"
.PD
.PP
.Vb 3
\&        C<font_size>            Defines the size of the font in postscript points to be used on labels
\&        C<callnum_split>        Setting this to \*(Aq1\*(Aq will enable call number splitting on labels
\&        C<text_justify>         Defines the text justification to be used on labels. NOTE: The following justification styles are currently supported by label creator code:
.Ve
.IP ". L       = Left" 9
.IX Item ". L       = Left"
.PD 0
.IP ". C       = Center" 9
.IX Item ". C       = Center"
.IP ". R       = Right" 9
.IX Item ". R       = Right"
.PD
.PP
.Vb 4
\&        C<format_string>        Defines what fields will be printed and in what order they will be printed on labels. These include any of the data fields that may be mapped
\&                                to your MARC frameworks. Specify MARC subfields as a 4\-character tag\-subfield string: ie. 254a Enclose a whitespace\-separated list of fields
\&                                to concatenate on one line in double quotes. ie. "099a 099b" or "itemcallnumber barcode" Static text strings may be entered in single\-quotes:
\&                                ie. \*(AqSome static text here.\*(Aq
\&
\&    example:
\&        C<my $layout = Layout\->new(); # Creates and returns a new layout object>
\&
\&        C<my $layout = C4::Labels::Layout\->new(barcode_type => \*(AqCODE39\*(Aq, printing_type => \*(AqBIBBAR\*(Aq, font => \*(AqC\*(Aq, font_size => 6); # Creates and returns a new layout object using
\&            the supplied values to override the defaults>
\&
\&    B<NOTE:> This layout is I<not> written to the database until save() is invoked. You have been warned!
.Ve
.SS "retrieve(layout_id => layout_id)"
.IX Subsection "retrieve(layout_id => layout_id)"
.Vb 2
\&    Invoking the I<retrieve> method constructs a new layout object containing the current values for layout_id. The method returns a new object upon success and 1 upon failure.
\&    Errors are logged to the Apache log.
\&
\&    example:
\&        C<my $layout = Layout\->retrieve(layout_id => 1); # Retrieves layout record 1 and returns an object containing the record>
.Ve
.SS "\fIdelete()\fP"
.IX Subsection "delete()"
.Vb 2
\&    Invoking the delete method attempts to delete the layout from the database. The method returns 0 upon success and \-1 upon failure. Errors are logged to the Apache log.
\&    NOTE: This method may also be called as a function and passed a key/value pair simply deleteing that template from the database. See the example below.
\&
\&    examples:
\&        C<my $exitstat = $layout\->delete(); # to delete the record behind the $layout object>
\&        C<my $exitstat = Layout\->delete(layout_id => 1); # to delete layout record 1>
.Ve
.SS "\fIsave()\fP"
.IX Subsection "save()"
.Vb 2
\&    Invoking the I<save> method attempts to insert the layout into the database if the layout is new and update the existing layout record if the layout exists.
\&    The method returns the new record id upon success and \-1 upon failure (This avoids conflicting with a record id of 1). Errors are logged to the Apache log.
\&
\&    example:
\&        C<my $exitstat = $layout\->save(); # to save the record behind the $layout object>
.Ve
.SS "get_attr($attribute)"
.IX Subsection "get_attr($attribute)"
.Vb 1
\&    Invoking the I<get_attr> method will return the value of the requested attribute or \-1 on errors.
\&
\&    example:
\&        C<my $value = $layout\->get_attr($attribute);>
.Ve
.SS "set_attr(attribute => value, attribute_2 => value)"
.IX Subsection "set_attr(attribute => value, attribute_2 => value)"
.Vb 2
\&    Invoking the I<set_attr> method will set the value of the supplied attributes to the supplied values. The method accepts key/value pairs separated by
\&    commas.
\&
\&    example:
\&        C<$layout\->set_attr(attribute => value);>
.Ve
.SS "\fIget_text_wrap_cols()\fP"
.IX Subsection "get_text_wrap_cols()"
.Vb 1
\&    Invoking the I<get_text_wrap_cols> method will return the number of columns that can be printed on the label before wrapping to the next line.
\&
\&    examples:
\&        C<my $text_wrap_cols = $layout\->get_text_wrap_cols();>
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Chris Nighswonger <cnighswonger \s-1AT\s0 foundations \s-1DOT\s0 edu>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 2009 Foundations Bible College.
.SH "LICENSE"
.IX Header "LICENSE"
This file is part of Koha.
.PP
Koha is free software; you can redistribute it and/or modify it under the terms of the \s-1GNU\s0 General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later version.
.PP
You should have received a copy of the \s-1GNU\s0 General Public License along with Koha; if not, write to the Free Software Foundation, Inc., 51 Franklin Street,
Fifth Floor, Boston, \s-1MA\s0 02110\-1301 \s-1USA\s0.
.SH "DISCLAIMER OF WARRANTY"
.IX Header "DISCLAIMER OF WARRANTY"
Koha is distributed in the hope that it will be useful, but \s-1WITHOUT\s0 \s-1ANY\s0 \s-1WARRANTY\s0; without even the implied warranty of \s-1MERCHANTABILITY\s0 or \s-1FITNESS\s0 \s-1FOR\s0
A \s-1PARTICULAR\s0 \s-1PURPOSE\s0.  See the \s-1GNU\s0 General Public License for more details.
