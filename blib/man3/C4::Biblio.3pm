.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "C4::Biblio 3pm"
.TH C4::Biblio 3pm "2012-07-03" "perl v5.14.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
C4::Biblio \- cataloging management functions
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Biblio.pm contains functions for managing storage and editing of bibliographic data within Koha. Most of the functions in this module are used for cataloging records: adding, editing, or removing biblios, biblioitems, or items. Koha's stores bibliographic information in three places:
.IP "1. in the biblio,biblioitems,items, etc tables, which are limited to a one-to-one mapping to underlying \s-1MARC\s0 data" 4
.IX Item "1. in the biblio,biblioitems,items, etc tables, which are limited to a one-to-one mapping to underlying MARC data"
.PD 0
.IP "2. as raw \s-1MARC\s0 in the Zebra index and storage engine" 4
.IX Item "2. as raw MARC in the Zebra index and storage engine"
.IP "3. as raw \s-1MARC\s0 the biblioitems.marc and biblioitems.marcxml" 4
.IX Item "3. as raw MARC the biblioitems.marc and biblioitems.marcxml"
.PD
.PP
In the 3.0 version of Koha, the authoritative record-level information is in biblioitems.marcxml
.PP
Because the data isn't completely normalized there's a chance for information to get out of sync. The design choice to go with a un-normalized schema was driven by performance and stability concerns. However, if this occur, it can be considered as a bug : The \s-1API\s0 is (or should be) complete & the only entry point for all biblio/items managements.
.IP "1. Compared with MySQL, Zebra is slow to update an index for small data changes \*(-- especially for proc-intensive operations like circulation" 4
.IX Item "1. Compared with MySQL, Zebra is slow to update an index for small data changes  especially for proc-intensive operations like circulation"
.PD 0
.IP "2. Zebra's index has been known to crash and a backup of the data is necessary to rebuild it in such cases" 4
.IX Item "2. Zebra's index has been known to crash and a backup of the data is necessary to rebuild it in such cases"
.PD
.PP
Because of this design choice, the process of managing storage and editing is a bit convoluted. Historically, Biblio.pm's grown to an unmanagable size and as a result we have several types of functions currently:
.IP "1. Add*/Mod*/Del*/ \- high-level external functions suitable for being called from external scripts to manage the collection" 4
.IX Item "1. Add*/Mod*/Del*/ - high-level external functions suitable for being called from external scripts to manage the collection"
.PD 0
.IP "2. _koha_* \- low-level internal functions for managing the koha tables" 4
.IX Item "2. _koha_* - low-level internal functions for managing the koha tables"
.IP "3. Marc management function : as the \s-1MARC\s0 record is stored in biblioitems.marc(xml), some subs dedicated to it's management are in this package. They should be used only internally by Biblio.pm, the only official entry points being AddBiblio, AddItem, ModBiblio, ModItem." 4
.IX Item "3. Marc management function : as the MARC record is stored in biblioitems.marc(xml), some subs dedicated to it's management are in this package. They should be used only internally by Biblio.pm, the only official entry points being AddBiblio, AddItem, ModBiblio, ModItem."
.IP "4. Zebra functions used to update the Zebra index" 4
.IX Item "4. Zebra functions used to update the Zebra index"
.IP "5. internal helper functions such as char_decode, checkitems, etc. Some of these probably belong in Koha.pm" 4
.IX Item "5. internal helper functions such as char_decode, checkitems, etc. Some of these probably belong in Koha.pm"
.PD
.PP
The \s-1MARC\s0 record (in biblioitems.marcxml) contains the complete marc record, including items. It also contains the biblionumber. That is the reason why it is not stored directly by AddBiblio, with all other fields . To save a biblio, we need to :
.IP "1. save datas in biblio and biblioitems table, that gives us a biblionumber and a biblioitemnumber" 4
.IX Item "1. save datas in biblio and biblioitems table, that gives us a biblionumber and a biblioitemnumber"
.PD 0
.IP "2. add the biblionumber and biblioitemnumber into the \s-1MARC\s0 records" 4
.IX Item "2. add the biblionumber and biblioitemnumber into the MARC records"
.IP "3. save the marc record" 4
.IX Item "3. save the marc record"
.PD
.PP
When dealing with items, we must :
.IP "1. save the item in items table, that gives us an itemnumber" 4
.IX Item "1. save the item in items table, that gives us an itemnumber"
.PD 0
.IP "2. add the itemnumber to the item \s-1MARC\s0 field" 4
.IX Item "2. add the itemnumber to the item MARC field"
.IP "3. overwrite the \s-1MARC\s0 record (with the added item) into biblioitems.marc(xml)" 4
.IX Item "3. overwrite the MARC record (with the added item) into biblioitems.marc(xml)"
.PD
When modifying a biblio or an item, the behaviour is quite similar.
.SH "EXPORTED FUNCTIONS"
.IX Header "EXPORTED FUNCTIONS"
.SS "AddBiblio"
.IX Subsection "AddBiblio"
.Vb 1
\&  ($biblionumber,$biblioitemnumber) = AddBiblio($record,$frameworkcode);
.Ve
.PP
Exported function (core \s-1API\s0) for adding a new biblio to koha.
.PP
The first argument is a \f(CW\*(C`MARC::Record\*(C'\fR object containing the
bib to add, while the second argument is the desired \s-1MARC\s0
framework code.
.PP
This function also accepts a third, optional argument: a hashref
to additional options.  The only defined option is \f(CW\*(C`defer_marc_save\*(C'\fR,
which if present and mapped to a true value, causes \f(CW\*(C`AddBiblio\*(C'\fR
to omit the call to save the \s-1MARC\s0 in \f(CW\*(C`bibilioitems.marc\*(C'\fR
and \f(CW\*(C`biblioitems.marcxml\*(C'\fR  This option is provided \fBonly\fR
for the use of scripts such as \f(CW\*(C`bulkmarcimport.pl\*(C'\fR that may need
to do some manipulation of the \s-1MARC\s0 record for item parsing before
saving it and which cannot afford the performance hit of saving
the \s-1MARC\s0 record twice.  Consequently, do not use that option
unless you can guarantee that \f(CW\*(C`ModBiblioMarc\*(C'\fR will be called.
.SS "ModBiblio"
.IX Subsection "ModBiblio"
.Vb 1
\&  ModBiblio( $record,$biblionumber,$frameworkcode);
.Ve
.PP
Replace an existing bib record identified by \f(CW$biblionumber\fR
with one supplied by the MARC::Record object \f(CW$record\fR.  The embedded
item, biblioitem, and biblionumber fields from the previous
version of the bib record replace any such fields of those tags that
are present in \f(CW$record\fR.  Consequently, \fIModBiblio()\fR is not
to be used to try to modify item records.
.PP
\&\f(CW$frameworkcode\fR specifies the \s-1MARC\s0 framework to use
when storing the modified bib record; among other things,
this controls how \s-1MARC\s0 fields get mapped to display columns
in the \f(CW\*(C`biblio\*(C'\fR and \f(CW\*(C`biblioitems\*(C'\fR tables, as well as
which fields are used to store embedded item, biblioitem,
and biblionumber data for indexing.
.SS "_strip_item_fields"
.IX Subsection "_strip_item_fields"
.Vb 1
\&  _strip_item_fields($record, $frameworkcode)
.Ve
.PP
Utility routine to remove item tags from a
\&\s-1MARC\s0 bib.
.SS "ModBiblioframework"
.IX Subsection "ModBiblioframework"
.Vb 1
\&   ModBiblioframework($biblionumber,$frameworkcode);
.Ve
.PP
Exported function to modify a biblio framework
.SS "DelBiblio"
.IX Subsection "DelBiblio"
.Vb 1
\&  my $error = &DelBiblio($biblionumber);
.Ve
.PP
Exported function (core \s-1API\s0) for deleting a biblio in koha.
Deletes biblio record from Zebra and Koha tables (biblio,biblioitems,items)
Also backs it up to deleted* tables
Checks to make sure there are not issues on any of the items
return:
\&\f(CW$error\fR : undef unless an error occurs
.SS "BiblioAutoLink"
.IX Subsection "BiblioAutoLink"
.Vb 1
\&  my $headings_linked = BiblioAutoLink($record, $frameworkcode)
.Ve
.PP
Automatically links headings in a bib record to authorities.
.SS "LinkBibHeadingsToAuthorities"
.IX Subsection "LinkBibHeadingsToAuthorities"
.Vb 1
\&  my $num_headings_changed, %results = LinkBibHeadingsToAuthorities($linker, $marc, $frameworkcode, [$allowrelink]);
.Ve
.PP
Links bib headings to authority records by checking
each authority-controlled field in the \f(CW\*(C`MARC::Record\*(C'\fR
object \f(CW$marc\fR, looking for a matching authority record,
and setting the linking subfield \f(CW$9\fR to the \s-1ID\s0 of that
authority record.
.PP
If \f(CW$allowrelink\fR is false, existing authids will never be
replaced, regardless of the values of LinkerKeepStale and
LinkerRelink.
.PP
Returns the number of heading links changed in the
\&\s-1MARC\s0 record.
.SS "GetRecordValue"
.IX Subsection "GetRecordValue"
.Vb 1
\&  my $values = GetRecordValue($field, $record, $frameworkcode);
.Ve
.PP
Get \s-1MARC\s0 fields from a keyword defined in fieldmapping table.
.SS "SetFieldMapping"
.IX Subsection "SetFieldMapping"
.Vb 1
\&  SetFieldMapping($framework, $field, $fieldcode, $subfieldcode);
.Ve
.PP
Set a Field to \s-1MARC\s0 mapping value, if it already exists we don't add a new one.
.SS "DeleteFieldMapping"
.IX Subsection "DeleteFieldMapping"
.Vb 1
\&  DeleteFieldMapping($id);
.Ve
.PP
Delete a field mapping from an \f(CW$id\fR.
.SS "GetFieldMapping"
.IX Subsection "GetFieldMapping"
.Vb 1
\&  GetFieldMapping($frameworkcode);
.Ve
.PP
Get all field mappings for a specified frameworkcode
.SS "GetBiblioData"
.IX Subsection "GetBiblioData"
.Vb 1
\&  $data = &GetBiblioData($biblionumber);
.Ve
.PP
Returns information about the book with the given biblionumber.
\&\f(CW&GetBiblioData\fR returns a reference-to-hash. The keys are the fields in
the \f(CW\*(C`biblio\*(C'\fR and \f(CW\*(C`biblioitems\*(C'\fR tables in the
Koha database.
.PP
In addition, \f(CW\*(C`$data\->{subject}\*(C'\fR is the list of the book's
subjects, separated by \f(CW" , "\fR (space, comma, space).
If there are multiple biblioitems with the given biblionumber, only
the first one is considered.
.SS "&GetBiblioItemData"
.IX Subsection "&GetBiblioItemData"
.Vb 1
\&  $itemdata = &GetBiblioItemData($biblioitemnumber);
.Ve
.PP
Looks up the biblioitem with the given biblioitemnumber. Returns a
reference-to-hash. The keys are the fields from the \f(CW\*(C`biblio\*(C'\fR,
\&\f(CW\*(C`biblioitems\*(C'\fR, and \f(CW\*(C`itemtypes\*(C'\fR tables in the Koha database, except
that \f(CW\*(C`biblioitems.notes\*(C'\fR is given as \f(CW\*(C`$itemdata\->{bnotes}\*(C'\fR.
.SS "GetBiblioItemByBiblioNumber"
.IX Subsection "GetBiblioItemByBiblioNumber"
\&\s-1NOTE\s0 : This function has been copy/paste from C4/Biblio.pm from head before zebra integration.
.SS "GetBiblionumberFromItemnumber"
.IX Subsection "GetBiblionumberFromItemnumber"
.SS "GetBiblioFromItemNumber"
.IX Subsection "GetBiblioFromItemNumber"
.Vb 1
\&  $item = &GetBiblioFromItemNumber($itemnumber,$barcode);
.Ve
.PP
Looks up the item with the given itemnumber. if undef, try the barcode.
.PP
\&\f(CW&itemnodata\fR returns a reference-to-hash whose keys are the fields
from the \f(CW\*(C`biblio\*(C'\fR, \f(CW\*(C`biblioitems\*(C'\fR, and \f(CW\*(C`items\*(C'\fR tables in the Koha
database.
.SS "GetISBDView"
.IX Subsection "GetISBDView"
.Vb 1
\&  $isbd = &GetISBDView($biblionumber);
.Ve
.PP
Return the \s-1ISBD\s0 view which can be included in opac and intranet
.SS "GetBiblio"
.IX Subsection "GetBiblio"
.Vb 1
\&  ( $count, @results ) = &GetBiblio($biblionumber);
.Ve
.SS "GetBiblioItemInfosOf"
.IX Subsection "GetBiblioItemInfosOf"
.Vb 1
\&  GetBiblioItemInfosOf(@biblioitemnumbers);
.Ve
.SH "FUNCTIONS FOR HANDLING MARC MANAGEMENT"
.IX Header "FUNCTIONS FOR HANDLING MARC MANAGEMENT"
.SS "GetMarcStructure"
.IX Subsection "GetMarcStructure"
.Vb 1
\&  $res = GetMarcStructure($forlibrarian,$frameworkcode);
.Ve
.PP
Returns a reference to a big hash of hash, with the Marc structure for the given frameworkcode
\&\f(CW$forlibrarian\fR  :if set to 1, the \s-1MARC\s0 descriptions are the librarians ones, otherwise it's the public (\s-1OPAC\s0) ones
\&\f(CW$frameworkcode\fR : the framework code to read
.SS "GetUsedMarcStructure"
.IX Subsection "GetUsedMarcStructure"
The same function as GetMarcStructure except it just takes field
in tab 0\-9. (used field)
.PP
.Vb 1
\&  my $results = GetUsedMarcStructure($frameworkcode);
.Ve
.PP
\&\f(CW$results\fR is a ref to an array which each case containts a ref
to a hash which each keys is the columns from marc_subfield_structure
.PP
\&\f(CW$frameworkcode\fR is the framework code.
.SS "GetMarcFromKohaField"
.IX Subsection "GetMarcFromKohaField"
.Vb 1
\&  ($MARCfield,$MARCsubfield)=GetMarcFromKohaField($kohafield,$frameworkcode);
.Ve
.PP
Returns the \s-1MARC\s0 fields & subfields mapped to the koha field 
for the given frameworkcode
.SS "GetMarcBiblio"
.IX Subsection "GetMarcBiblio"
.Vb 1
\&  my $record = GetMarcBiblio($biblionumber, [$embeditems]);
.Ve
.PP
Returns MARC::Record representing bib identified by
\&\f(CW$biblionumber\fR.  If no bib exists, returns undef.
\&\f(CW$embeditems\fR.  If set to true, items data are included.
The \s-1MARC\s0 record contains biblio data, and items data if \f(CW$embeditems\fR is set to true.
.SS "GetXmlBiblio"
.IX Subsection "GetXmlBiblio"
.Vb 1
\&  my $marcxml = GetXmlBiblio($biblionumber);
.Ve
.PP
Returns biblioitems.marcxml of the biblionumber passed in parameter.
The \s-1XML\s0 contains both biblio & item datas
.SS "GetCOinSBiblio"
.IX Subsection "GetCOinSBiblio"
.Vb 1
\&  my $coins = GetCOinSBiblio($record);
.Ve
.PP
Returns the COinS (a span) which can be included in a biblio record
.SS "GetMarcPrice"
.IX Subsection "GetMarcPrice"
return the prices in accordance with the Marc format.
.SS "MungeMarcPrice"
.IX Subsection "MungeMarcPrice"
Return the best guess at what the actual price is from a price field.
.SS "GetMarcQuantity"
.IX Subsection "GetMarcQuantity"
return the quantity of a book. Used in acquisition only, when importing a file an iso2709 from a bookseller
Warning : this is not really in the marc standard. In Unimarc, Electre (the most widely used bookseller) use the 969$a
.SS "GetAuthorisedValueDesc"
.IX Subsection "GetAuthorisedValueDesc"
.Vb 2
\&  my $subfieldvalue =get_authorised_value_desc(
\&    $tag, $subf[$i][0],$subf[$i][1], \*(Aq\*(Aq, $taglib, $category, $opac);
.Ve
.PP
Retrieve the complete description for a given authorised value.
.PP
Now takes \f(CW$category\fR and \f(CW$value\fR pair too.
.PP
.Vb 2
\&  my $auth_value_desc =GetAuthorisedValueDesc(
\&    \*(Aq\*(Aq,\*(Aq\*(Aq, \*(AqDVD\*(Aq ,\*(Aq\*(Aq,\*(Aq\*(Aq,\*(AqCCODE\*(Aq);
.Ve
.PP
If the optional \f(CW$opac\fR parameter is set to a true value, displays \s-1OPAC\s0 
descriptions rather than normal ones when they exist.
.SS "GetMarcControlnumber"
.IX Subsection "GetMarcControlnumber"
.Vb 1
\&  $marccontrolnumber = GetMarcControlnumber($record,$marcflavour);
.Ve
.PP
Get the control number / record Identifier from the \s-1MARC\s0 record and return it.
.SS "GetMarcISBN"
.IX Subsection "GetMarcISBN"
.Vb 1
\&  $marcisbnsarray = GetMarcISBN( $record, $marcflavour );
.Ve
.PP
Get all ISBNs from the \s-1MARC\s0 record and returns them in an array.
ISBNs stored in different fields depending on \s-1MARC\s0 flavour
.SS "GetMarcISSN"
.IX Subsection "GetMarcISSN"
.Vb 1
\&  $marcissnsarray = GetMarcISSN( $record, $marcflavour );
.Ve
.PP
Get all valid ISSNs from the \s-1MARC\s0 record and returns them in an array.
ISSNs are stored in different fields depending on \s-1MARC\s0 flavour
.SS "GetMarcNotes"
.IX Subsection "GetMarcNotes"
.Vb 1
\&  $marcnotesarray = GetMarcNotes( $record, $marcflavour );
.Ve
.PP
Get all notes from the \s-1MARC\s0 record and returns them in an array.
The note are stored in different fields depending on \s-1MARC\s0 flavour
.SS "GetMarcSubjects"
.IX Subsection "GetMarcSubjects"
.Vb 1
\&  $marcsubjcts = GetMarcSubjects($record,$marcflavour);
.Ve
.PP
Get all subjects from the \s-1MARC\s0 record and returns them in an array.
The subjects are stored in different fields depending on \s-1MARC\s0 flavour
.SS "GetMarcAuthors"
.IX Subsection "GetMarcAuthors"
.Vb 1
\&  authors = GetMarcAuthors($record,$marcflavour);
.Ve
.PP
Get all authors from the \s-1MARC\s0 record and returns them in an array.
The authors are stored in different fields depending on \s-1MARC\s0 flavour
.SS "GetMarcUrls"
.IX Subsection "GetMarcUrls"
.Vb 1
\&  $marcurls = GetMarcUrls($record,$marcflavour);
.Ve
.PP
Returns arrayref of URLs from \s-1MARC\s0 data, suitable to pass to tmpl loop.
Assumes web resources (not uncommon in \s-1MARC21\s0 to omit resource type ind)
.SS "GetMarcSeries"
.IX Subsection "GetMarcSeries"
.Vb 1
\&  $marcseriesarray = GetMarcSeries($record,$marcflavour);
.Ve
.PP
Get all series from the \s-1MARC\s0 record and returns them in an array.
The series are stored in different fields depending on \s-1MARC\s0 flavour
.SS "GetMarcHosts"
.IX Subsection "GetMarcHosts"
.Vb 1
\&  $marchostsarray = GetMarcHosts($record,$marcflavour);
.Ve
.PP
Get all host records (773s \s-1MARC21\s0, 461 \s-1UNIMARC\s0) from the \s-1MARC\s0 record and returns them in an array.
.SS "GetFrameworkCode"
.IX Subsection "GetFrameworkCode"
.Vb 1
\&  $frameworkcode = GetFrameworkCode( $biblionumber )
.Ve
.SS "TransformKohaToMarc"
.IX Subsection "TransformKohaToMarc"
.Vb 1
\&    $record = TransformKohaToMarc( $hash )
.Ve
.PP
This function builds partial MARC::Record from a hash
Hash entries can be from biblio or biblioitems.
.PP
This function is called in acquisition module, to create a basic catalogue
entry from user entry
.SS "PrepHostMarcField"
.IX Subsection "PrepHostMarcField"
.Vb 1
\&    $hostfield = PrepHostMarcField ( $hostbiblionumber,$hostitemnumber,$marcflavour )
.Ve
.PP
This function returns a host field populated with data from the host record, the field can then be added to an analytical record
.SS "TransformHtmlToXml"
.IX Subsection "TransformHtmlToXml"
.Vb 2
\&  $xml = TransformHtmlToXml( $tags, $subfields, $values, $indicator, 
\&                             $ind_tag, $auth_type )
.Ve
.PP
\&\f(CW$auth_type\fR contains :
.IP "\- nothing : rebuild a biblio. In \s-1UNIMARC\s0 the encoding is in 100$a pos 26/27" 4
.IX Item "- nothing : rebuild a biblio. In UNIMARC the encoding is in 100$a pos 26/27"
.PD 0
.IP "\- \s-1UNIMARCAUTH\s0 : rebuild an authority. In \s-1UNIMARC\s0, the encoding is in 100$a pos 13/14" 4
.IX Item "- UNIMARCAUTH : rebuild an authority. In UNIMARC, the encoding is in 100$a pos 13/14"
.IP "\- \s-1ITEM\s0 : rebuild an item : in \s-1UNIMARC\s0, 100$a, it's in the biblio ! (otherwise, we would get 2 100 fields !)" 4
.IX Item "- ITEM : rebuild an item : in UNIMARC, 100$a, it's in the biblio ! (otherwise, we would get 2 100 fields !)"
.PD
.SS "_default_ind_to_space"
.IX Subsection "_default_ind_to_space"
Passed what should be an indicator returns a space
if its undefined or zero length
.SS "TransformHtmlToMarc"
.IX Subsection "TransformHtmlToMarc"
.Vb 10
\&    L<$record> = TransformHtmlToMarc(L<$cgi>)
\&    L<$cgi> is the CGI object which containts the values for subfields
\&    {
\&        \*(Aqtag_010_indicator1_531951\*(Aq ,
\&        \*(Aqtag_010_indicator2_531951\*(Aq ,
\&        \*(Aqtag_010_code_a_531951_145735\*(Aq ,
\&        \*(Aqtag_010_subfield_a_531951_145735\*(Aq ,
\&        \*(Aqtag_200_indicator1_873510\*(Aq ,
\&        \*(Aqtag_200_indicator2_873510\*(Aq ,
\&        \*(Aqtag_200_code_a_873510_673465\*(Aq ,
\&        \*(Aqtag_200_subfield_a_873510_673465\*(Aq ,
\&        \*(Aqtag_200_code_b_873510_704318\*(Aq ,
\&        \*(Aqtag_200_subfield_b_873510_704318\*(Aq ,
\&        \*(Aqtag_200_code_e_873510_280822\*(Aq ,
\&        \*(Aqtag_200_subfield_e_873510_280822\*(Aq ,
\&        \*(Aqtag_200_code_f_873510_110730\*(Aq ,
\&        \*(Aqtag_200_subfield_f_873510_110730\*(Aq ,
\&    }
\&    L<$record> is the MARC::Record object.
.Ve
.SS "TransformMarcToKoha"
.IX Subsection "TransformMarcToKoha"
.Vb 1
\&  $result = TransformMarcToKoha( $dbh, $record, $frameworkcode )
.Ve
.PP
Extract data from a \s-1MARC\s0 bib record into a hashref representing
Koha biblio, biblioitems, and items fields.
.SS "_disambiguate"
.IX Subsection "_disambiguate"
.Vb 1
\&  $newkey = _disambiguate($table, $field);
.Ve
.PP
This is a temporary hack to distinguish between the
following sets of columns when using TransformMarcToKoha.
.PP
.Vb 2
\&  items.cn_source & biblioitems.cn_source
\&  items.cn_sort & biblioitems.cn_sort
.Ve
.PP
Columns that are currently \s-1NOT\s0 distinguished (\s-1FIXME\s0
due to lack of time to fully test) are:
.PP
.Vb 4
\&  biblio.notes and biblioitems.notes
\&  biblionumber
\&  timestamp
\&  biblioitemnumber
.Ve
.PP
\&\s-1FIXME\s0 \- this is necessary because prefixing each column
name with the table name would require changing lots
of code and templates, and exposing more of the \s-1DB\s0
structure than is good to the \s-1UI\s0 templates, particularly
since biblio and bibloitems may well merge in a future
version.  In the future, it would also be good to 
separate \s-1DB\s0 access and \s-1UI\s0 presentation field names
more.
.SS "get_koha_field_from_marc"
.IX Subsection "get_koha_field_from_marc"
.Vb 2
\&  $result\->{_disambiguate($table, $field)} = 
\&     get_koha_field_from_marc($table,$field,$record,$frameworkcode);
.Ve
.PP
Internal function to map data from the \s-1MARC\s0 record to a specific non-MARC field.
\&\s-1FIXME:\s0 this is meant to replace TransformMarcToKohaOneField after more testing.
.SS "TransformMarcToKohaOneField"
.IX Subsection "TransformMarcToKohaOneField"
.Vb 1
\&  $result = TransformMarcToKohaOneField( $kohatable, $kohafield, $record, $result, $frameworkcode )
.Ve
.SS "ModZebra"
.IX Subsection "ModZebra"
.Vb 1
\&  ModZebra( $biblionumber, $op, $server, $oldRecord, $newRecord );
.Ve
.PP
\&\f(CW$biblionumber\fR is the biblionumber we want to index
.PP
\&\f(CW$op\fR is specialUpdate or delete, and is used to know what we want to do
.PP
\&\f(CW$server\fR is the server that we want to update
.PP
\&\f(CW$oldRecord\fR is the MARC::Record containing the previous version of the record.  This is used only when 
NoZebra=1, as NoZebra indexing needs to know the previous version of a record in order to
do an update.
.PP
\&\f(CW$newRecord\fR is the MARC::Record containing the new record. It is usefull only when NoZebra=1, and is used to know what to add to the nozebra database. (the record in mySQL being, if it exist, the previous record, the one just before the modif. We need both : the previous and the new one.
.SS "GetNoZebraIndexes"
.IX Subsection "GetNoZebraIndexes"
.Vb 1
\&  %indexes = GetNoZebraIndexes;
.Ve
.PP
return the data from NoZebraIndexes syspref.
.SS "EmbedItemsInMarcBiblio"
.IX Subsection "EmbedItemsInMarcBiblio"
.Vb 1
\&    EmbedItemsInMarcBiblio($marc, $biblionumber);
.Ve
.PP
Given a MARC::Record object containing a bib record,
modify it to include the items attached to it as 9XX
per the bib's \s-1MARC\s0 framework.
.SH "INTERNAL FUNCTIONS"
.IX Header "INTERNAL FUNCTIONS"
.SS "_DelBiblioNoZebra($biblionumber,$record,$server);"
.IX Subsection "_DelBiblioNoZebra($biblionumber,$record,$server);"
function to delete a biblio in NoZebra indexes
This function does \s-1NOT\s0 delete anything in database : it reads all the indexes entries
that have to be deleted & delete them in the hash
.PP
The \s-1SQL\s0 part is done either :
 \- after the Add if we are modifying a biblio (delete + add again)
 \- immediatly after this sub if we are doing a true deletion.
.PP
\&\f(CW$server\fR can be 'biblioserver' or 'authorityserver' : it indexes biblios or authorities (in the same table, \f(CW$server\fR being part of the table itself
.SS "_AddBiblioNoZebra"
.IX Subsection "_AddBiblioNoZebra"
.Vb 1
\&  _AddBiblioNoZebra($biblionumber, $record, $server, %result);
.Ve
.PP
function to add a biblio in NoZebra indexes
.SS "_koha_marc_update_bib_ids"
.IX Subsection "_koha_marc_update_bib_ids"
.Vb 1
\&  _koha_marc_update_bib_ids($record, $frameworkcode, $biblionumber, $biblioitemnumber);
.Ve
.PP
Internal function to add or update biblionumber and biblioitemnumber to
the \s-1MARC\s0 \s-1XML\s0.
.SS "_koha_marc_update_biblioitem_cn_sort"
.IX Subsection "_koha_marc_update_biblioitem_cn_sort"
.Vb 1
\&  _koha_marc_update_biblioitem_cn_sort($marc, $biblioitem, $frameworkcode);
.Ve
.PP
Given a \s-1MARC\s0 bib record and the biblioitem hash, update the
subfield that contains a copy of the value of biblioitems.cn_sort.
.SS "_koha_add_biblio"
.IX Subsection "_koha_add_biblio"
.Vb 1
\&  my ($biblionumber,$error) = _koha_add_biblio($dbh,$biblioitem);
.Ve
.PP
Internal function to add a biblio ($biblio is a hash with the values)
.SS "_koha_modify_biblio"
.IX Subsection "_koha_modify_biblio"
.Vb 1
\&  my ($biblionumber,$error) == _koha_modify_biblio($dbh,$biblio,$frameworkcode);
.Ve
.PP
Internal function for updating the biblio table
.SS "_koha_modify_biblioitem_nonmarc"
.IX Subsection "_koha_modify_biblioitem_nonmarc"
.Vb 1
\&  my ($biblioitemnumber,$error) = _koha_modify_biblioitem_nonmarc( $dbh, $biblioitem );
.Ve
.PP
Updates biblioitems row except for marc and marcxml, which should be changed
via ModBiblioMarc
.SS "_koha_add_biblioitem"
.IX Subsection "_koha_add_biblioitem"
.Vb 1
\&  my ($biblioitemnumber,$error) = _koha_add_biblioitem( $dbh, $biblioitem );
.Ve
.PP
Internal function to add a biblioitem
.SS "_koha_delete_biblio"
.IX Subsection "_koha_delete_biblio"
.Vb 1
\&  $error = _koha_delete_biblio($dbh,$biblionumber);
.Ve
.PP
Internal sub for deleting from biblio table \*(-- also saves to deletedbiblio
.PP
\&\f(CW$dbh\fR \- the database handle
.PP
\&\f(CW$biblionumber\fR \- the biblionumber of the biblio to be deleted
.SS "_koha_delete_biblioitems"
.IX Subsection "_koha_delete_biblioitems"
.Vb 1
\&  $error = _koha_delete_biblioitems($dbh,$biblioitemnumber);
.Ve
.PP
Internal sub for deleting from biblioitems table \*(-- also saves to deletedbiblioitems
.PP
\&\f(CW$dbh\fR \- the database handle
\&\f(CW$biblionumber\fR \- the biblioitemnumber of the biblioitem to be deleted
.SH "UNEXPORTED FUNCTIONS"
.IX Header "UNEXPORTED FUNCTIONS"
.SS "ModBiblioMarc"
.IX Subsection "ModBiblioMarc"
.Vb 1
\&  &ModBiblioMarc($newrec,$biblionumber,$frameworkcode);
.Ve
.PP
Add \s-1MARC\s0 data for a biblio to koha
.PP
Function exported, but should \s-1NOT\s0 be used, unless you really know what you're doing
.SS "get_biblio_authorised_values"
.IX Subsection "get_biblio_authorised_values"
find the types and values for all authorised values assigned to this biblio.
.PP
parameters:
    biblionumber
    MARC::Record of the bib
.PP
returns: a hashref mapping the authorised value to the value set for this biblionumber
.PP
.Vb 5
\&  $authorised_values = {
\&                       \*(AqScent\*(Aq     => \*(Aqflowery\*(Aq,
\&                       \*(AqAudience\*(Aq  => \*(AqYoung Adult\*(Aq,
\&                       \*(Aqitemtypes\*(Aq => \*(AqSER\*(Aq,
\&                        };
.Ve
.PP
Notes: forlibrarian should probably be passed in, and called something different.
.SS "CountBiblioInOrders"
.IX Subsection "CountBiblioInOrders"
This function return count of biblios in orders with \f(CW$biblionumber\fR
.SS "GetSubscriptionsId"
.IX Subsection "GetSubscriptionsId"
This function return an array of subscriptionid with \f(CW$biblionumber\fR
.SS "GetHolds"
.IX Subsection "GetHolds"
This function return the count of holds with \f(CW$biblionumber\fR
.SS "prepare_host_field"
.IX Subsection "prepare_host_field"
\&\f(CW$marcfield\fR = prepare_host_field( \f(CW$hostbiblioitem\fR, \f(CW$marcflavour\fR );
Generate the host item entry for an analytic child entry
.SS "UpdateTotalIssues"
.IX Subsection "UpdateTotalIssues"
.Vb 1
\&  UpdateTotalIssues($biblionumber, $increase, [$value])
.Ve
.PP
Update the total issue count for a particular bib record.
.ie n .IP "$biblionumber is the biblionumber of the bib to update" 4
.el .IP "\f(CW$biblionumber\fR is the biblionumber of the bib to update" 4
.IX Item "$biblionumber is the biblionumber of the bib to update"
.PD 0
.ie n .IP "$increase is the amount to increase (or decrease) the total issues count by" 4
.el .IP "\f(CW$increase\fR is the amount to increase (or decrease) the total issues count by" 4
.IX Item "$increase is the amount to increase (or decrease) the total issues count by"
.ie n .IP "$value is the absolute value that total issues count should be set to. If provided, $increase is ignored." 4
.el .IP "\f(CW$value\fR is the absolute value that total issues count should be set to. If provided, \f(CW$increase\fR is ignored." 4
.IX Item "$value is the absolute value that total issues count should be set to. If provided, $increase is ignored."
.PD
.SH "AUTHOR"
.IX Header "AUTHOR"
Koha Development Team <http://koha\-community.org/>
.PP
Paul \s-1POULAIN\s0 paul.poulain@free.fr
.PP
Joshua Ferraro jmf@liblime.com
