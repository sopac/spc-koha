.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "C4::Acquisition 3pm"
.TH C4::Acquisition 3pm "2012-07-03" "perl v5.14.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
C4::Acquisition \- Koha functions for dealing with orders and acquisitions
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
use C4::Acquisition;
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The functions in this module deal with acquisitions, managing book
orders, basket and parcels.
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.SS "\s-1FUNCTIONS\s0 \s-1ABOUT\s0 \s-1BASKETS\s0"
.IX Subsection "FUNCTIONS ABOUT BASKETS"
\fIGetBasket\fR
.IX Subsection "GetBasket"
.PP
.Vb 1
\&  $aqbasket = &GetBasket($basketnumber);
.Ve
.PP
get all basket informations in aqbasket for a given basket
.PP
\&\fBreturns:\fR informations for a given basket returned as a hashref.
.PP
\fINewBasket\fR
.IX Subsection "NewBasket"
.PP
.Vb 2
\&  $basket = &NewBasket( $booksellerid, $authorizedby, $basketname, 
\&      $basketnote, $basketbooksellernote, $basketcontractnumber );
.Ve
.PP
Create a new basket in aqbasket table
.ie n .IP "$booksellerid is a foreign key in the aqbasket table" 4
.el .IP "\f(CW$booksellerid\fR is a foreign key in the aqbasket table" 4
.IX Item "$booksellerid is a foreign key in the aqbasket table"
.PD 0
.ie n .IP "$authorizedby is the username of who created the basket" 4
.el .IP "\f(CW$authorizedby\fR is the username of who created the basket" 4
.IX Item "$authorizedby is the username of who created the basket"
.PD
.PP
The other parameters are optional, see ModBasketHeader for more info on them.
.PP
\fICloseBasket\fR
.IX Subsection "CloseBasket"
.PP
.Vb 1
\&  &CloseBasket($basketno);
.Ve
.PP
close a basket (becomes unmodifiable,except for recieves)
.PP
\fIGetBasketAsCSV\fR
.IX Subsection "GetBasketAsCSV"
.PP
.Vb 1
\&  &GetBasketAsCSV($basketno);
.Ve
.PP
Export a basket as \s-1CSV\s0
.PP
\fICloseBasketgroup\fR
.IX Subsection "CloseBasketgroup"
.PP
.Vb 1
\&  &CloseBasketgroup($basketgroupno);
.Ve
.PP
close a basketgroup
.PP
\fIReOpenBaskergroup($basketgroupno)\fR
.IX Subsection "ReOpenBaskergroup($basketgroupno)"
.PP
.Vb 1
\&  &ReOpenBaskergroup($basketgroupno);
.Ve
.PP
reopen a basketgroup
.PP
\fIDelBasket\fR
.IX Subsection "DelBasket"
.PP
.Vb 1
\&  &DelBasket($basketno);
.Ve
.PP
Deletes the basket that has basketno field \f(CW$basketno\fR in the aqbasket table.
.ie n .IP "$basketno is the primary key of the basket in the aqbasket table." 4
.el .IP "\f(CW$basketno\fR is the primary key of the basket in the aqbasket table." 4
.IX Item "$basketno is the primary key of the basket in the aqbasket table."
.PP
\fIModBasket\fR
.IX Subsection "ModBasket"
.PP
.Vb 1
\&  &ModBasket($basketinfo);
.Ve
.PP
Modifies a basket, using a hashref \f(CW$basketinfo\fR for the relevant information, only \f(CW$basketinfo\fR\->{'basketno'} is required.
.ie n .IP "$basketno is the primary key of the basket in the aqbasket table." 4
.el .IP "\f(CW$basketno\fR is the primary key of the basket in the aqbasket table." 4
.IX Item "$basketno is the primary key of the basket in the aqbasket table."
.PP
\fIModBasketHeader\fR
.IX Subsection "ModBasketHeader"
.PP
.Vb 1
\&  &ModBasketHeader($basketno, $basketname, $note, $booksellernote, $contractnumber, $booksellerid);
.Ve
.PP
Modifies a basket's header.
.ie n .IP "$basketno is the ""basketno"" field in the ""aqbasket"" table;" 4
.el .IP "\f(CW$basketno\fR is the ``basketno'' field in the ``aqbasket'' table;" 4
.IX Item "$basketno is the basketno field in the aqbasket table;"
.PD 0
.ie n .IP "$basketname is the ""basketname"" field in the ""aqbasket"" table;" 4
.el .IP "\f(CW$basketname\fR is the ``basketname'' field in the ``aqbasket'' table;" 4
.IX Item "$basketname is the basketname field in the aqbasket table;"
.ie n .IP "$note is the ""note"" field in the ""aqbasket"" table;" 4
.el .IP "\f(CW$note\fR is the ``note'' field in the ``aqbasket'' table;" 4
.IX Item "$note is the note field in the aqbasket table;"
.ie n .IP "$booksellernote is the ""booksellernote"" field in the ""aqbasket"" table;" 4
.el .IP "\f(CW$booksellernote\fR is the ``booksellernote'' field in the ``aqbasket'' table;" 4
.IX Item "$booksellernote is the booksellernote field in the aqbasket table;"
.ie n .IP "$contractnumber is the ""contractnumber"" (foreign) key in the ""aqbasket"" table." 4
.el .IP "\f(CW$contractnumber\fR is the ``contractnumber'' (foreign) key in the ``aqbasket'' table." 4
.IX Item "$contractnumber is the contractnumber (foreign) key in the aqbasket table."
.ie n .IP "$booksellerid is the id (foreign) key in the ""aqbooksellers"" table for the vendor." 4
.el .IP "\f(CW$booksellerid\fR is the id (foreign) key in the ``aqbooksellers'' table for the vendor." 4
.IX Item "$booksellerid is the id (foreign) key in the aqbooksellers table for the vendor."
.PD
.PP
\fIGetBasketsByBookseller\fR
.IX Subsection "GetBasketsByBookseller"
.PP
.Vb 1
\&  @results = &GetBasketsByBookseller($booksellerid, $extra);
.Ve
.PP
Returns a list of hashes of all the baskets that belong to bookseller 'booksellerid'.
.ie n .IP "$booksellerid is the 'id' field of the bookseller in the aqbooksellers table" 4
.el .IP "\f(CW$booksellerid\fR is the 'id' field of the bookseller in the aqbooksellers table" 4
.IX Item "$booksellerid is the 'id' field of the bookseller in the aqbooksellers table"
.PD 0
.ie n .IP "$extra is the extra sql parameters, can be" 4
.el .IP "\f(CW$extra\fR is the extra sql parameters, can be" 4
.IX Item "$extra is the extra sql parameters, can be"
.PD
.Vb 4
\& $extra\->{groupby}: group baskets by column
\&    ex. $extra\->{groupby} = aqbasket.basketgroupid
\& $extra\->{orderby}: order baskets by column
\& $extra\->{limit}: limit number of results (can be helpful for pagination)
.Ve
.PP
\fIGetBasketsInfosByBookseller\fR
.IX Subsection "GetBasketsInfosByBookseller"
.PP
.Vb 1
\&    my $baskets = GetBasketsInfosByBookseller($supplierid);
.Ve
.PP
Returns in a arrayref of hashref all about booksellers baskets, plus:
    total_biblios: Number of distinct biblios in basket
    total_items: Number of items in basket
    expected_items: Number of non-received items in basket
.PP
\fIGetBasketsByBasketgroup\fR
.IX Subsection "GetBasketsByBasketgroup"
.PP
.Vb 1
\&  $baskets = &GetBasketsByBasketgroup($basketgroupid);
.Ve
.PP
Returns a reference to all baskets that belong to basketgroup \f(CW$basketgroupid\fR.
.PP
\fINewBasketgroup\fR
.IX Subsection "NewBasketgroup"
.PP
.Vb 1
\&  $basketgroupid = NewBasketgroup(\e%hashref);
.Ve
.PP
Adds a basketgroup to the aqbasketgroups table, and add the initial baskets to it.
.PP
\&\f(CW$hashref\fR\->{'booksellerid'} is the 'id' field of the bookseller in the aqbooksellers table,
.PP
\&\f(CW$hashref\fR\->{'name'} is the 'name' field of the basketgroup in the aqbasketgroups table,
.PP
\&\f(CW$hashref\fR\->{'basketlist'} is a list reference of the 'id's of the baskets that belong to this group,
.PP
\&\f(CW$hashref\fR\->{'deliveryplace'} is the 'deliveryplace' field of the basketgroup in the aqbasketgroups table,
.PP
\&\f(CW$hashref\fR\->{'deliverycomment'} is the 'deliverycomment' field of the basketgroup in the aqbasketgroups table,
.PP
\&\f(CW$hashref\fR\->{'closed'} is the 'closed' field of the aqbasketgroups table, it is false if 0, true otherwise.
.PP
\fIModBasketgroup\fR
.IX Subsection "ModBasketgroup"
.PP
.Vb 1
\&  ModBasketgroup(\e%hashref);
.Ve
.PP
Modifies a basketgroup in the aqbasketgroups table, and add the baskets to it.
.PP
\&\f(CW$hashref\fR\->{'id'} is the 'id' field of the basketgroup in the aqbasketgroup table, this parameter is mandatory,
.PP
\&\f(CW$hashref\fR\->{'name'} is the 'name' field of the basketgroup in the aqbasketgroups table,
.PP
\&\f(CW$hashref\fR\->{'basketlist'} is a list reference of the 'id's of the baskets that belong to this group,
.PP
\&\f(CW$hashref\fR\->{'billingplace'} is the 'billingplace' field of the basketgroup in the aqbasketgroups table,
.PP
\&\f(CW$hashref\fR\->{'deliveryplace'} is the 'deliveryplace' field of the basketgroup in the aqbasketgroups table,
.PP
\&\f(CW$hashref\fR\->{'deliverycomment'} is the 'deliverycomment' field of the basketgroup in the aqbasketgroups table,
.PP
\&\f(CW$hashref\fR\->{'closed'} is the 'closed' field of the aqbasketgroups table, it is false if 0, true otherwise.
.PP
\fIDelBasketgroup\fR
.IX Subsection "DelBasketgroup"
.PP
.Vb 1
\&  DelBasketgroup($basketgroupid);
.Ve
.PP
Deletes a basketgroup in the aqbasketgroups table, and removes the reference to it from the baskets,
.ie n .IP "$basketgroupid is the 'id' field of the basket in the aqbasketgroup table" 4
.el .IP "\f(CW$basketgroupid\fR is the 'id' field of the basket in the aqbasketgroup table" 4
.IX Item "$basketgroupid is the 'id' field of the basket in the aqbasketgroup table"
.SS "\s-1FUNCTIONS\s0 \s-1ABOUT\s0 \s-1ORDERS\s0"
.IX Subsection "FUNCTIONS ABOUT ORDERS"
\fIGetBasketgroup\fR
.IX Subsection "GetBasketgroup"
.PP
.Vb 1
\&  $basketgroup = &GetBasketgroup($basketgroupid);
.Ve
.PP
Returns a reference to the hash containing all infermation about the basketgroup.
.PP
\fIGetBasketgroups\fR
.IX Subsection "GetBasketgroups"
.PP
.Vb 1
\&  $basketgroups = &GetBasketgroups($booksellerid);
.Ve
.PP
Returns a reference to the array of all the basketgroups of bookseller \f(CW$booksellerid\fR.
.SS "\s-1FUNCTIONS\s0 \s-1ABOUT\s0 \s-1ORDERS\s0"
.IX Subsection "FUNCTIONS ABOUT ORDERS"
\fIGetPendingOrders\fR
.IX Subsection "GetPendingOrders"
.PP
.Vb 1
\&  $orders = &GetPendingOrders($booksellerid, $grouped, $owner);
.Ve
.PP
Finds pending orders from the bookseller with the given \s-1ID\s0. Ignores
completed and cancelled orders.
.PP
\&\f(CW$booksellerid\fR contains the bookseller identifier
\&\f(CW$grouped\fR contains 0 or 1. 0 means returns the list, 1 means return the total
\&\f(CW$owner\fR contains 0 or 1. 0 means any owner. 1 means only the list of orders entered by the user itself.
.PP
\&\f(CW$orders\fR is a reference-to-array; each element is a
reference-to-hash with the following fields:
\&\f(CW$grouped\fR is a boolean that, if set to 1 will group all order lines of the same basket
in a single result line
.ie n .IP """authorizedby""" 4
.el .IP "\f(CWauthorizedby\fR" 4
.IX Item "authorizedby"
.PD 0
.ie n .IP """entrydate""" 4
.el .IP "\f(CWentrydate\fR" 4
.IX Item "entrydate"
.ie n .IP """basketno""" 4
.el .IP "\f(CWbasketno\fR" 4
.IX Item "basketno"
.PD
.PP
These give the value of the corresponding field in the aqorders table
of the Koha database.
.PP
Results are ordered from most to least recent.
.PP
\fIGetOrders\fR
.IX Subsection "GetOrders"
.PP
.Vb 1
\&  @orders = &GetOrders($basketnumber, $orderby);
.Ve
.PP
Looks up the pending (non-cancelled) orders with the given basket
number. If \f(CW$booksellerID\fR is non-empty, only orders from that seller
are returned.
.PP
return :
\&\f(CW&basket\fR returns a two-element array. \f(CW@orders\fR is an array of
references-to-hash, whose keys are the fields from the aqorders,
biblio, and biblioitems tables in the Koha database.
.PP
\fIGetOrderNumber\fR
.IX Subsection "GetOrderNumber"
.PP
.Vb 1
\&  $ordernumber = &GetOrderNumber($biblioitemnumber, $biblionumber);
.Ve
.PP
Looks up the ordernumber with the given biblionumber and biblioitemnumber.
.PP
Returns the number of this order.
.ie n .IP "$ordernumber is the order number." 4
.el .IP "\f(CW$ordernumber\fR is the order number." 4
.IX Item "$ordernumber is the order number."
.PP
\fIGetOrder\fR
.IX Subsection "GetOrder"
.PP
.Vb 1
\&  $order = &GetOrder($ordernumber);
.Ve
.PP
Looks up an order by order number.
.PP
Returns a reference-to-hash describing the order. The keys of
\&\f(CW$order\fR are fields from the biblio, biblioitems, aqorders tables of the Koha database.
.PP
\fINewOrder\fR
.IX Subsection "NewOrder"
.PP
.Vb 1
\&  &NewOrder(\e%hashref);
.Ve
.PP
Adds a new order to the database. Any argument that isn't described
below is the new value of the field with the same name in the aqorders
table of the Koha database.
.ie n .IP "$hashref\->{'basketno'} is the basketno foreign key in aqorders, it is mandatory" 4
.el .IP "\f(CW$hashref\fR\->{'basketno'} is the basketno foreign key in aqorders, it is mandatory" 4
.IX Item "$hashref->{'basketno'} is the basketno foreign key in aqorders, it is mandatory"
.PD 0
.ie n .IP "$hashref\->{'ordernumber'} is a ""minimum order number.""" 4
.el .IP "\f(CW$hashref\fR\->{'ordernumber'} is a ``minimum order number.''" 4
.IX Item "$hashref->{'ordernumber'} is a minimum order number."
.ie n .IP "$hashref\->{'budgetdate'} is effectively ignored. If it's undef (anything false) or the string 'now', the current day is used. Else, the upcoming July 1st is used." 4
.el .IP "\f(CW$hashref\fR\->{'budgetdate'} is effectively ignored. If it's undef (anything false) or the string 'now', the current day is used. Else, the upcoming July 1st is used." 4
.IX Item "$hashref->{'budgetdate'} is effectively ignored. If it's undef (anything false) or the string 'now', the current day is used. Else, the upcoming July 1st is used."
.ie n .IP "$hashref\->{'subscription'} may be either ""yes"", or anything else for ""no""." 4
.el .IP "\f(CW$hashref\fR\->{'subscription'} may be either ``yes'', or anything else for ``no''." 4
.IX Item "$hashref->{'subscription'} may be either yes, or anything else for no."
.ie n .IP "$hashref\->{'uncertainprice'} may be 0 for ""the price is known"" or 1 for ""the price is uncertain""" 4
.el .IP "\f(CW$hashref\fR\->{'uncertainprice'} may be 0 for ``the price is known'' or 1 for ``the price is uncertain''" 4
.IX Item "$hashref->{'uncertainprice'} may be 0 for the price is known or 1 for the price is uncertain"
.IP "defaults entrydate to Now" 4
.IX Item "defaults entrydate to Now"
.PD
The following keys are used: \*(L"biblionumber\*(R", \*(L"title\*(R", \*(L"basketno\*(R", \*(L"quantity\*(R", \*(L"notes\*(R", \*(L"biblioitemnumber\*(R", \*(L"rrp\*(R", \*(L"ecost\*(R", \*(L"gst\*(R", \*(L"unitprice\*(R", \*(L"subscription\*(R", \*(L"sort1\*(R", \*(L"sort2\*(R", \*(L"booksellerinvoicenumber\*(R", \*(L"listprice\*(R", \*(L"budgetdate\*(R", \*(L"purchaseordernumber\*(R", \*(L"branchcode\*(R", \*(L"booksellerinvoicenumber\*(R", \*(L"bookfundid\*(R".
.PP
\fINewOrderItem\fR
.IX Subsection "NewOrderItem"
.PP
.Vb 1
\&  &NewOrderItem();
.Ve
.PP
\fIModOrder\fR
.IX Subsection "ModOrder"
.PP
.Vb 1
\&  &ModOrder(\e%hashref);
.Ve
.PP
Modifies an existing order. Updates the order with order number
\&\f(CW$hashref\fR\->{'ordernumber'} and biblionumber \f(CW$hashref\fR\->{'biblionumber'}. All 
other keys of the hash update the fields with the same name in the aqorders 
table of the Koha database.
.PP
\fIModOrderItem\fR
.IX Subsection "ModOrderItem"
.PP
.Vb 1
\&  &ModOrderItem(\e%hashref);
.Ve
.PP
Modifies the itemnumber in the aqorders_items table. The input hash needs three entities:
.IP "\- itemnumber: the old itemnumber =item \- ordernumber: the order this item is attached to =item \- newitemnumber: the new itemnumber we want to attach the line to" 4
.IX Item "- itemnumber: the old itemnumber =item - ordernumber: the order this item is attached to =item - newitemnumber: the new itemnumber we want to attach the line to"
.PP
\fIModItemOrder\fR
.IX Subsection "ModItemOrder"
.PP
.Vb 1
\&    ModItemOrder($itemnumber, $ordernumber);
.Ve
.PP
Modifies the ordernumber of an item in aqorders_items.
.PP
\fIModOrderBibliotemNumber\fR
.IX Subsection "ModOrderBibliotemNumber"
.PP
.Vb 1
\&  &ModOrderBiblioitemNumber($biblioitemnumber,$ordernumber, $biblionumber);
.Ve
.PP
Modifies the biblioitemnumber for an existing order.
Updates the order with order number \f(CW$ordernum\fR and biblionumber \f(CW$biblionumber\fR.
.PP
\fIGetCancelledOrders\fR
.IX Subsection "GetCancelledOrders"
.PP
.Vb 1
\&  my @orders = GetCancelledOrders($basketno, $orderby);
.Ve
.PP
Returns cancelled orders for a basket
.PP
\fIModReceiveOrder\fR
.IX Subsection "ModReceiveOrder"
.PP
.Vb 3
\&  &ModReceiveOrder($biblionumber, $ordernumber, $quantityreceived, $user,
\&    $unitprice, $booksellerinvoicenumber, $biblioitemnumber,
\&    $freight, $bookfund, $rrp);
.Ve
.PP
Updates an order, to reflect the fact that it was received, at least
in part. All arguments not mentioned below update the fields with the
same name in the aqorders table of the Koha database.
.PP
If a partial order is received, splits the order into two.  The received
portion must have a booksellerinvoicenumber.
.PP
Updates the order with bibilionumber \f(CW$biblionumber\fR and ordernumber
\&\f(CW$ordernumber\fR.
.PP
\fISearchOrder\fR
.IX Subsection "SearchOrder"
.PP
\&\f(CW@results\fR = &SearchOrder($search, \f(CW$biblionumber\fR, \f(CW$complete\fR);
.PP
Searches for orders.
.PP
\&\f(CW$search\fR may take one of several forms: if it is an \s-1ISBN\s0,
\&\f(CW&ordersearch\fR returns orders with that \s-1ISBN\s0. If \f(CW$search\fR is an
order number, \f(CW&ordersearch\fR returns orders with that order number
and biblionumber \f(CW$biblionumber\fR. Otherwise, \f(CW$search\fR is considered
to be a space-separated list of search terms; in this case, all of the
terms must appear in the title (matching the beginning of title
words).
.PP
If \f(CW$complete\fR is \f(CW\*(C`yes\*(C'\fR, the results will include only completed
orders. In any case, \f(CW&ordersearch\fR ignores cancelled orders.
.PP
\&\f(CW&ordersearch\fR returns an array.
\&\f(CW@results\fR is an array of references-to-hash with the following keys:
.ie n .IP """author""" 4
.el .IP "\f(CWauthor\fR" 4
.IX Item "author"
.PD 0
.ie n .IP """seriestitle""" 4
.el .IP "\f(CWseriestitle\fR" 4
.IX Item "seriestitle"
.ie n .IP """branchcode""" 4
.el .IP "\f(CWbranchcode\fR" 4
.IX Item "branchcode"
.ie n .IP """bookfundid""" 4
.el .IP "\f(CWbookfundid\fR" 4
.IX Item "bookfundid"
.PD
.PP
\fIDelOrder\fR
.IX Subsection "DelOrder"
.PP
.Vb 1
\&  &DelOrder($biblionumber, $ordernumber);
.Ve
.PP
Cancel the order with the given order and biblio numbers. It does not
delete any entries in the aqorders table, it merely marks them as
cancelled.
.SS "\s-1FUNCTIONS\s0 \s-1ABOUT\s0 \s-1PARCELS\s0"
.IX Subsection "FUNCTIONS ABOUT PARCELS"
\fIGetParcel\fR
.IX Subsection "GetParcel"
.PP
.Vb 1
\&  @results = &GetParcel($booksellerid, $code, $date);
.Ve
.PP
Looks up all of the received items from the supplier with the given
bookseller \s-1ID\s0 at the given date, for the given code (bookseller Invoice number). Ignores cancelled and completed orders.
.PP
\&\f(CW@results\fR is an array of references-to-hash. The keys of each element are fields from
the aqorders, biblio, and biblioitems tables of the Koha database.
.PP
\&\f(CW@results\fR is sorted alphabetically by book title.
.PP
\fIGetParcels\fR
.IX Subsection "GetParcels"
.PP
.Vb 1
\&  $results = &GetParcels($bookseller, $order, $code, $datefrom, $dateto);
.Ve
.PP
get a lists of parcels.
.PP
* Input arg :
.ie n .IP "$bookseller is the bookseller this function has to get parcels." 4
.el .IP "\f(CW$bookseller\fR is the bookseller this function has to get parcels." 4
.IX Item "$bookseller is the bookseller this function has to get parcels."
.PD 0
.ie n .IP "$order To know on what criteria the results list has to be ordered." 4
.el .IP "\f(CW$order\fR To know on what criteria the results list has to be ordered." 4
.IX Item "$order To know on what criteria the results list has to be ordered."
.ie n .IP "$code is the booksellerinvoicenumber." 4
.el .IP "\f(CW$code\fR is the booksellerinvoicenumber." 4
.IX Item "$code is the booksellerinvoicenumber."
.ie n .IP "$datefrom & $dateto to know on what date this function has to filter its search." 4
.el .IP "\f(CW$datefrom\fR & \f(CW$dateto\fR to know on what date this function has to filter its search." 4
.IX Item "$datefrom & $dateto to know on what date this function has to filter its search."
.PD
.PP
* return:
a pointer on a hash list containing parcel informations as such :
.IP "Creation date" 4
.IX Item "Creation date"
.PD 0
.IP "Last operation" 4
.IX Item "Last operation"
.IP "Number of biblio" 4
.IX Item "Number of biblio"
.IP "Number of items" 4
.IX Item "Number of items"
.PD
.PP
\fIGetLateOrders\fR
.IX Subsection "GetLateOrders"
.PP
.Vb 1
\&  @results = &GetLateOrders;
.Ve
.PP
Searches for bookseller with late orders.
.PP
return:
the table of supplier with late issues. This table is full of hashref.
.PP
\fIGetHistory\fR
.IX Subsection "GetHistory"
.PP
.Vb 1
\&  (\e@order_loop, $total_qty, $total_price, $total_qtyreceived) = GetHistory( %params );
.Ve
.PP
Retreives some acquisition history information
.PP
params:  
  title
  author
  name
  from_placed_on
  to_placed_on
  basket                  \- search both basket name and number
  booksellerinvoicenumber
.PP
returns:
    \f(CW$order_loop\fR is a list of hashrefs that each look like this:
            {
                'author'           => 'Twain, Mark',
                'basketno'         => '1',
                'biblionumber'     => '215',
                'count'            => 1,
                'creationdate'     => '\s-1MM/DD/YYYY\s0',
                'datereceived'     => undef,
                'ecost'            => '1.00',
                'id'               => '1',
                'invoicenumber'    => undef,
                'name'             => '',
                'ordernumber'      => '1',
                'quantity'         => 1,
                'quantityreceived' => undef,
                'title'            => 'The Adventures of Huckleberry Finn'
            }
    \f(CW$total_qty\fR is the sum of all of the quantities in \f(CW$order_loop\fR
    \f(CW$total_price\fR is the cost of each in \f(CW$order_loop\fR times the quantity
    \f(CW$total_qtyreceived\fR is the sum of all of the quantityreceived entries in \f(CW$order_loop\fR
.SS "GetRecentAcqui"
.IX Subsection "GetRecentAcqui"
.Vb 1
\&  $results = GetRecentAcqui($days);
.Ve
.PP
\&\f(CW$results\fR is a ref to a table which containts hashref
.PP
\fIGetContracts\fR
.IX Subsection "GetContracts"
.PP
.Vb 1
\&  $contractlist = &GetContracts($booksellerid, $activeonly);
.Ve
.PP
Looks up the contracts that belong to a bookseller
.PP
Returns a list of contracts
.ie n .IP "$booksellerid is the ""id"" field in the ""aqbooksellers"" table." 4
.el .IP "\f(CW$booksellerid\fR is the ``id'' field in the ``aqbooksellers'' table." 4
.IX Item "$booksellerid is the id field in the aqbooksellers table."
.PD 0
.ie n .IP "$activeonly if exists get only contracts that are still active." 4
.el .IP "\f(CW$activeonly\fR if exists get only contracts that are still active." 4
.IX Item "$activeonly if exists get only contracts that are still active."
.PD
.PP
\fIGetContract\fR
.IX Subsection "GetContract"
.PP
.Vb 1
\&  $contract = &GetContract($contractID);
.Ve
.PP
Looks up the contract that has \s-1PRIMKEY\s0 (contractnumber) value \f(CW$contractID\fR
.PP
Returns a contract
.PP
\fIAddClaim\fR
.IX Subsection "AddClaim"
.Sp
.RS 4
&AddClaim($ordernumber);
.Sp
Add a claim for an order
.RE
.SH "AUTHOR"
.IX Header "AUTHOR"
Koha Development Team <http://koha\-community.org/>
