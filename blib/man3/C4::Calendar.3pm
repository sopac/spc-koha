.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "C4::Calendar 3pm"
.TH C4::Calendar 3pm "2012-07-03" "perl v5.14.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
C4::Calendar::Calendar \- Koha module dealing with holidays.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use C4::Calendar::Calendar;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This package is used to deal with holidays. Through this package, you can set 
all kind of holidays for the library.
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.SS "new"
.IX Subsection "new"
.Vb 1
\&  $calendar = C4::Calendar\->new(branchcode => $branchcode);
.Ve
.PP
Each library branch has its own Calendar.  
\&\f(CW$branchcode\fR specifies which Calendar you want.
.SS "get_week_days_holidays"
.IX Subsection "get_week_days_holidays"
.Vb 1
\&   $week_days_holidays = $calendar\->get_week_days_holidays();
.Ve
.PP
Returns a hash reference to week days holidays.
.SS "get_day_month_holidays"
.IX Subsection "get_day_month_holidays"
.Vb 1
\&   $day_month_holidays = $calendar\->get_day_month_holidays();
.Ve
.PP
Returns a hash reference to day month holidays.
.SS "get_exception_holidays"
.IX Subsection "get_exception_holidays"
.Vb 1
\&    $exception_holidays = $calendar\->exception_holidays();
.Ve
.PP
Returns a hash reference to exception holidays. This kind of days are those
which stands for a holiday, but you wanted to make an exception for this particular
date.
.SS "get_single_holidays"
.IX Subsection "get_single_holidays"
.Vb 1
\&    $single_holidays = $calendar\->get_single_holidays();
.Ve
.PP
Returns a hash reference to single holidays. This kind of holidays are those which
happend just one time.
.SS "insert_week_day_holiday"
.IX Subsection "insert_week_day_holiday"
.Vb 3
\&    insert_week_day_holiday(weekday => $weekday,
\&                            title => $title,
\&                            description => $description);
.Ve
.PP
Inserts a new week day for \f(CW$self\fR\->{branchcode}.
.PP
\&\f(CW$day\fR Is the week day to make holiday.
.PP
\&\f(CW$title\fR Is the title to store for the holiday formed by \f(CW$year\fR/$month/$day.
.PP
\&\f(CW$description\fR Is the description to store for the holiday formed by \f(CW$year\fR/$month/$day.
.SS "insert_day_month_holiday"
.IX Subsection "insert_day_month_holiday"
.Vb 4
\&    insert_day_month_holiday(day => $day,
\&                             month => $month,
\&                             title => $title,
\&                             description => $description);
.Ve
.PP
Inserts a new day month holiday for \f(CW$self\fR\->{branchcode}.
.PP
\&\f(CW$day\fR Is the day month to make the date to insert.
.PP
\&\f(CW$month\fR Is month to make the date to insert.
.PP
\&\f(CW$title\fR Is the title to store for the holiday formed by \f(CW$year\fR/$month/$day.
.PP
\&\f(CW$description\fR Is the description to store for the holiday formed by \f(CW$year\fR/$month/$day.
.SS "insert_single_holiday"
.IX Subsection "insert_single_holiday"
.Vb 5
\&    insert_single_holiday(day => $day,
\&                          month => $month,
\&                          year => $year,
\&                          title => $title,
\&                          description => $description);
.Ve
.PP
Inserts a new single holiday for \f(CW$self\fR\->{branchcode}.
.PP
\&\f(CW$day\fR Is the day month to make the date to insert.
.PP
\&\f(CW$month\fR Is month to make the date to insert.
.PP
\&\f(CW$year\fR Is year to make the date to insert.
.PP
\&\f(CW$title\fR Is the title to store for the holiday formed by \f(CW$year\fR/$month/$day.
.PP
\&\f(CW$description\fR Is the description to store for the holiday formed by \f(CW$year\fR/$month/$day.
.SS "insert_exception_holiday"
.IX Subsection "insert_exception_holiday"
.Vb 5
\&    insert_exception_holiday(day => $day,
\&                             month => $month,
\&                             year => $year,
\&                             title => $title,
\&                             description => $description);
.Ve
.PP
Inserts a new exception holiday for \f(CW$self\fR\->{branchcode}.
.PP
\&\f(CW$day\fR Is the day month to make the date to insert.
.PP
\&\f(CW$month\fR Is month to make the date to insert.
.PP
\&\f(CW$year\fR Is year to make the date to insert.
.PP
\&\f(CW$title\fR Is the title to store for the holiday formed by \f(CW$year\fR/$month/$day.
.PP
\&\f(CW$description\fR Is the description to store for the holiday formed by \f(CW$year\fR/$month/$day.
.SS "ModWeekdayholiday"
.IX Subsection "ModWeekdayholiday"
.Vb 3
\&    ModWeekdayholiday(weekday =>$weekday,
\&                      title => $title,
\&                      description => $description)
.Ve
.PP
Modifies the title and description of a weekday for \f(CW$self\fR\->{branchcode}.
.PP
\&\f(CW$weekday\fR Is the title to update for the holiday.
.PP
\&\f(CW$description\fR Is the description to update for the holiday.
.SS "ModDaymonthholiday"
.IX Subsection "ModDaymonthholiday"
.Vb 4
\&    ModDaymonthholiday(day => $day,
\&                       month => $month,
\&                       title => $title,
\&                       description => $description);
.Ve
.PP
Modifies the title and description for a day/month holiday for \f(CW$self\fR\->{branchcode}.
.PP
\&\f(CW$day\fR The day of the month for the update.
.PP
\&\f(CW$month\fR The month to be used for the update.
.PP
\&\f(CW$title\fR The title to be updated for the holiday.
.PP
\&\f(CW$description\fR The description to be update for the holiday.
.SS "ModSingleholiday"
.IX Subsection "ModSingleholiday"
.Vb 5
\&    ModSingleholiday(day => $day,
\&                     month => $month,
\&                     year => $year,
\&                     title => $title,
\&                     description => $description);
.Ve
.PP
Modifies the title and description for a single holiday for \f(CW$self\fR\->{branchcode}.
.PP
\&\f(CW$day\fR Is the day of the month to make the update.
.PP
\&\f(CW$month\fR Is the month to make the update.
.PP
\&\f(CW$year\fR Is the year to make the update.
.PP
\&\f(CW$title\fR Is the title to update for the holiday formed by \f(CW$year\fR/$month/$day.
.PP
\&\f(CW$description\fR Is the description to update for the holiday formed by \f(CW$year\fR/$month/$day.
.SS "ModExceptionholiday"
.IX Subsection "ModExceptionholiday"
.Vb 5
\&    ModExceptionholiday(day => $day,
\&                        month => $month,
\&                        year => $year,
\&                        title => $title,
\&                        description => $description);
.Ve
.PP
Modifies the title and description for an exception holiday for \f(CW$self\fR\->{branchcode}.
.PP
\&\f(CW$day\fR Is the day of the month for the holiday.
.PP
\&\f(CW$month\fR Is the month for the holiday.
.PP
\&\f(CW$year\fR Is the year for the holiday.
.PP
\&\f(CW$title\fR Is the title to be modified for the holiday formed by \f(CW$year\fR/$month/$day.
.PP
\&\f(CW$description\fR Is the description to be modified for the holiday formed by \f(CW$year\fR/$month/$day.
.SS "delete_holiday"
.IX Subsection "delete_holiday"
.Vb 4
\&    delete_holiday(weekday => $weekday
\&                   day => $day,
\&                   month => $month,
\&                   year => $year);
.Ve
.PP
Delete a holiday for \f(CW$self\fR\->{branchcode}.
.PP
\&\f(CW$weekday\fR Is the week day to delete.
.PP
\&\f(CW$day\fR Is the day month to make the date to delete.
.PP
\&\f(CW$month\fR Is month to make the date to delete.
.PP
\&\f(CW$year\fR Is year to make the date to delete.
.SS "isHoliday"
.IX Subsection "isHoliday"
.Vb 1
\&    $isHoliday = isHoliday($day, $month $year);
.Ve
.PP
\&\f(CW$day\fR Is the day to check whether if is a holiday or not.
.PP
\&\f(CW$month\fR Is the month to check whether if is a holiday or not.
.PP
\&\f(CW$year\fR Is the year to check whether if is a holiday or not.
.SS "copy_to_branch"
.IX Subsection "copy_to_branch"
.Vb 1
\&    $calendar\->copy_to_branch($target_branch)
.Ve
.SS "addDate"
.IX Subsection "addDate"
.Vb 1
\&    my ($day, $month, $year) = $calendar\->addDate($date, $offset)
.Ve
.PP
\&\f(CW$date\fR is a C4::Dates object representing the starting date of the interval.
.PP
\&\f(CW$offset\fR Is the number of days that this function has to count from \f(CW$date\fR.
.SS "daysBetween"
.IX Subsection "daysBetween"
.Vb 1
\&    my $daysBetween = $calendar\->daysBetween($startdate, $enddate)
.Ve
.PP
\&\f(CW$startdate\fR and \f(CW$enddate\fR are C4::Dates objects that define the interval.
.PP
Returns the number of non-holiday days in the interval.
useDaysMode syspref has no effect here.
.SH "AUTHOR"
.IX Header "AUTHOR"
Koha Physics Library \s-1UNLP\s0 <matias_veleda@hotmail.com>
